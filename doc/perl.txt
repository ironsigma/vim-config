                             PERL QUICK REFERENCE

                                                              *perl_reference*
This is just a perl quick reference. It is not complete but includes most of
what you need when writing perl programs.

==============================================================================
CONTENT

Functions by category                                 |perl_functions_cat|
    Scalar manipulation                               |perl_functions_scalar|
    Regular expressions and pattern matching          |perl_functions_regexp|
    Numeric functions                                 |perl_functions_numeric|
    Array processing                                  |perl_functions_array|
    List processing                                   |perl_functions_list|
    Hash processing                                   |perl_functions_hash|
    Input and output                                  |perl_functions_io|
    Fixedlength data and records                      |perl_functions_records|
    Filehandles files and directories                 |perl_functions_handles|
    Flow of program control                           |perl_functions_flow|
    Scoping                                           |perl_functions_scope|
    Miscellaneous                                     |perl_functions_misc|
    Processes and process groups                      |perl_functions_proc|
    Library modules                                   |perl_functions_lib|
    Classes and objects                               |perl_functions_oop|
    Lowlevel socket access                            |perl_functions_low|
    System v interprocess communication               |perl_functions_com|
    Fetching user and group information               |perl_functions_ugi|
    Fetching network information                      |perl_functions_net|
    Time                                              |perl_functions_time|

Functions by name                                     |perl_functions|

==============================================================================
FUNCTIONS BY CATEGORY                                     *perl_functions_cat*

SCALAR MANIPULATION                                    *perl_functions_scalar*
chomp            remove nl char from string                     |perl_chomp|
chop             remove the last char from the string           |perl_chop|
chr              return char represented by the number          |perl_chr|
crypt            one way encryption                             |perl_crypt|
hex              hex string to decimal                          |perl_hex|
index            get the index of the substring                 |perl_index|
lc               lowercase a string                             |perl_lc|
lcfirst          lowercase the first char of a string           |perl_lcfirst|
length           length in bytes of a scalar value              |perl_length|
oct              interpret the octal string as a decimal val    |perl_oct|
ord              returnt the numeric ASCII value                |perl_ord|
pack             pack values into a binary structure            |perl_pack|
q/string/        generalized forms of quoting                   |perl_q|
reverse          reverse the order of a list                    |perl_reverse|
rindex           reverse index                                  |perl_rindex|
sprintf          return string formated with printf             |perl_sprintf|
substr           return a sub string                            |perl_substr|
tr               transliterate a string                         |perl_tr|
uc               uppercase a string                             |perl_uc|
ucfirst          upercase the first char of a string            |perl_ucfirst|
y                transliterate a string                         |perl_tr|

REGULAR EXPRESSIONS AND PATTERN MATCHING               *perl_functions_regexp*
m                regular expression delim operator              |perl_m|
pos              return the position of a char                  |perl_pos|
q/string/        generalized forms of quoting                   |perl_q|
quotemeta        quote meta chars                               |perl_quotemeta|
s                substituions operator                          |perl_s|
split            split a string with pattern                    |perl_split|
study            study string for many pattern matches          |perl_study|

NUMERIC FUNCTIONS                                     *perl_functions_numeric*
abs              absolute value.                                |perl_abs|
atan2            arctangent                                     |perl_atan2|
cos              get the cosine of a number                     |perl_cos|
exp              return e to the power of num                   |perl_exp|
hex              hex string to decimal                          |perl_hex|
int              return integer portion                         |perl_int|
log              get the logarithm of a number                  |perl_log|
oct              interpret the octal string as a decimal val    |perl_oct|
rand             return a random number                         |perl_rand|
sin              return the sine of a function                  |perl_sin|
sqrt             return the squre root of a number              |perl_sqrt|
srand            set the random number seed                     |perl_srand|

ARRAY PROCESSING                                        *perl_functions_array*
pop              pop an element from an array                   |perl_pop|
push             pushes an element to an array                  |perl_push|
shift            remove the first value from an array           |perl_shift|
splice           replace elements in a list                     |perl_splice|
unshift          pre-append an element to an array              |perl_unshift|

LIST PROCESSING                                          *perl_functions_list*
grep             grep withing an expression                     |perl_grep|
join             join string to a single line                   |perl_join|
map              map out values for an expression               |perl_map|
q/string/        generalized forms of quoting                   |perl_q|
reverse          reverse the order of a list                    |perl_reverse|
sort             sort a list                                    |perl_sort|
unpack           unpack a binary structure                      |perl_unpack|

HASH PROCESSING                                          *perl_functions_hash*
delete           delete key or keys from hash                   |perl_delete|
each             return a key and a value for a hash            |perl_each|
exists           determine if a key exists in a hash            |perl_exists|
keys             get all the keys for a hash                    |perl_keys|
values           get the values of a hash                       |perl_values|

INPUT AND OUTPUT                                           *perl_functions_io*
binmode          handle file as binary                          |perl_binmode|
close            close file, socket or pipe                     |perl_close|
closedir         close directory handle                         |perl_closedir|
dbmclose         close DBM file associated with hash            |perl_dbmclose|
dbmopen          open DBM file for hash                         |perl_dbmopen|
die              print out message and exit program             |perl_die|
eof              determine if next read is eof                  |perl_eof|
fileno           return the file descriptor                     |perl_fileno|
flock            establish or remove lock on a file             |perl_flock|
format           define a format                                |perl_format|
getc             get the next byte from a file                  |perl_getc|
print            print a string                                 |perl_print|
printf           printf function                                |perl_printf|
read             read bytes from a file handle                  |perl_read|
readdir          read directory entries from a directory handle |perl_readdir|
rewinddir        move to the begin of a readdir                 |perl_rewinddir|
seek             position the file pointer of a file handle     |perl_seek|
seekdir          set the position of a readdir                  |perl_seekdir|
select           set the default file handle                    |perl_select|
syscall          call a specific system call                    |perl_syscall|
sysread          read from a system file                        |perl_sysread|
sysseek          set the system file's position                 |perl_sysseek|
syswrite         write to a system file                         |perl_syswrite|
tell             return the read position of a file             |perl_tell|
telldir          return the read psostion of a readdir          |perl_telldir|
truncate         truncate a file                                |perl_truncate|
warn             produce a warning message                      |perl_warn|
write            write a formated record to a file              |perl_write|

FIXEDLENGTH DATA AND RECORDS                          *perl_functions_records*
pack             pack values into a binary structure            |perl_pack|
read             read bytes from a file handle                  |perl_read|
syscall          call a specific system call                    |perl_syscall|
sysread          read from a system file                        |perl_sysread|
syswrite         write to a system file                         |perl_syswrite|
unpack           unpack a binary structure                      |perl_unpack|
vec              treat string as a vector of unsigned ints      |perl_vec|

FILEHANDLES FILES AND DIRECTORIES                     *perl_functions_handles*
chdir            change the working directory                   |perl_chdir|
chmod            change file permissions                        |perl_chmod|
chown            change owner and group of files                |perl_chown|
chroot           change root directory for the current process  |perl_chroot|
fcntl            calls the file control function                |perl_fcntl|
glob             globbing, file name expansion                  |perl_glob|
ioctl            call ioctl unix system call                    |perl_ioctl|
link             create a unix hard link                        |perl_link|
lstat            return information about a file                |perl_lstat|
mkdir            make a directory                               |perl_mkdir|
open             open a file                                    |perl_open|
opendir          open a directory for processing                |perl_opendir|
readlink         gets the name of the file pointed by the link  |perl_readlink|
rename           change the name of a file                      |perl_rename|
rmdir            remove a directory                             |perl_rmdir|
stat             returnt the stats on a file                    |perl_stat|
symlink          create a symbolic link                         |perl_symlink|
sysopen          open a system file                             |perl_sysopen|
umask            set teh umask for a process                    |perl_umask|
unlink           delete a file                                  |perl_unlink|
utime            change the access time of a file               |perl_utime|

FLOW OF PROGRAM CONTROL                                  *perl_functions_flow*
caller           info about the stack sub calls                 |perl_caller|
continue         block to be executed after a next statement    |perl_continue|
die              print out message and exit program             |perl_die|
do               executes commands in the block                 |perl_do|
dump             dump core                                      |perl_dump|
eval             evaluate the expression to perl program        |perl_eval|
exit             exit perl process                              |perl_exit|
goto             jump to a label                                |perl_goto|
last             immediately exit a loop                        |perl_last|
next             jump to the next iteration of the loop         |perl_next|
redo             re-start a loop                                |perl_redo|
return           return from a subroutine                       |perl_return|
sub              declare a subroutine                           |perl_sub|
wantarray        determine if subroutine is wants an array      |perl_wantarray|

SCOPING                                                 *perl_functions_scope*
caller           info about the stack sub calls                 |perl_caller|
import           used to export names to another module         |perl_import|
local            declare a variable local                       |perl_local|
my               define a variable with block scope             |perl_my|
package          define a namespace                             |perl_package|
use              use version or modules                         |perl_use|

MISCELLANEOUS                                            *perl_functions_misc*
defined          determine if a variable has a value            |perl_defined|
dump             dump core                                      |perl_dump|
eval             evaluate the expression to perl program        |perl_eval|
formline         format a list of values                        |perl_formline|
local            declare a variable local                       |perl_local|
my               define a variable with block scope             |perl_my|
prototype        returns the prototype of a function            |perl_prototype|
reset            clear global variables for loops               |perl_reset|
scalar           force an expression to be evaluated scalar     |perl_scalar|
undef            undefine the value of an expression            |perl_undef|
wantarray        determine if subroutine is wants an array      |perl_wantarray|

PROCESSES AND PROCESS GROUPS                             *perl_functions_proc*
alarm            send a SIGALRM                                 |perl_alarm|
exec             terminate perl and execute a command           |perl_exec|
fork             spaw a child process                           |perl_fork|
getpgrp          get process group for the process id           |perl_getpgrp|
getppid          get pid of parent                              |perl_getppid|
getpriority      get process' priority                          |perl_getpriority|
kill             send a signal to a list of processes           |perl_kill|
pipe             opens a pair of connected pipes                |perl_pipe|
q/string/        generalized forms of quoting                   |perl_q|
setpgrp          set the current processes group                |perl_setpgrp|
setpriority      set the process priority                       |perl_setpriority|
sleep            sleep for n seconds                            |perl_sleep|
system           execute a system program                       |perl_system|
times            get CPU times                                  |perl_times|
wait             wait for child process to terminate            |perl_wait|
waitpid          wait for child process with pid                |perl_waitpid|

LIBRARY MODULES                                           *perl_functions_lib*
do               executes commands in the block                 |perl_do|
import           used to export names to another module         |perl_import|
no               undoes the use function                        |perl_no|
package          define a namespace                             |perl_package|
require          require a file, version or package             |perl_require|
use              use version or modules                         |perl_use|

CLASSES AND OBJECTS                                       *perl_functions_oop*
bless            make an item an object of the classname pkg    |perl_bless|
dbmclose         close DBM file associated with hash            |perl_dbmclose|
dbmopen          open DBM file for hash                         |perl_dbmopen|
package          define a namespace                             |perl_package|
ref              return the type of an object                   |perl_ref|
tie              bind a variable to a package class             |perl_tie|
tied             get a reference to an object returned by tie   |perl_tied|
untie            break the bind between a var and a package     |perl_untie|
use              use version or modules                         |perl_use|

LOWLEVEL SOCKET ACCESS                                    *perl_functions_low*
accept           readies a server to accept connections         |perl_accept|
bind             attach address to socket                       |perl_bind|
connect          connect to a process                           |perl_connect|
getpeername      get the address of the peer                    |perl_getpeername|
getsockname      get the name of the socket address             |perl_getsockname|
getsockopt       get the value of the socket with option        |perl_getsockopt|
listen           wait for a socket connection                   |perl_listen|
recv             receive a message on a socket                  |perl_recv|
send             send a message on a specific socket            |perl_send|
setsockopt       set the socket option                          |perl_setsockopt|
shutdown         shutdown a socket connection                   |perl_shutdown|
socket           open a socket                                  |perl_socket|
socketpair       create a pair of sockets                       |perl_socketpair|

SYSTEM V INTERPROCESS COMMUNICATION                       *perl_functions_com*
msgctl           call the msgctl unix system call               |perl_msgctl|
msgget           call the msgget unix system call               |perl_msgget|
msgrcv           call the msgrcv unix system call               |perl_msgrcv|
msgsnd           call the msgsnd unix system call               |perl_msgsnd|
semctl           call the unix system function semctl           |perl_semctl|
semget           call the unix system function semget           |perl_semget|
semop            call the unix system function semop            |perl_semop|
shmctl           call the unix system function shmctl           |perl_shmctl|
shmget           call the unix system function shmget           |perl_shmget|
shmread          read shared memory segment                     |perl_shmread|
shmwrite         write to the shared memory segment             |perl_shmwrite|

FETCHING USER AND GROUP INFORMATION                       *perl_functions_ugi*
endgrent         close the group file                           |perl_endgrent|
endhostent       close the host file                            |perl_endhostent|
endnetent        close the network file                         |perl_endnetent|
endpwent         close the password file                        |perl_endpwent|
getgrent         get next entry from system group file          |perl_getgrent|
getgrgid         get a group file entry by id                   |perl_getgrgid|
getgrnam         get a group file entry by name                 |perl_getgrnam|
getlogin         get current login                              |perl_getlogin|
getpwent         get the next line from /etc/passwd             |perl_getpwent|
getpwnam         get password entry for a user                  |perl_getpwnam|
getpwuid         get password entry for a user with uid         |perl_getpwuid|
setgrent         open group file                                |perl_setgrent|
setpwent         open the password file                         |perl_setpwent|

FETCHING NETWORK INFORMATION                              *perl_functions_net*
endprotoent      close the prototype file                       |perl_endprotoent|
endservent       close the service file                         |perl_endservent|
gethostbyaddr    get host name by address                       |perl_gethostbyaddr|
gethostbyname    get host by name                               |perl_gethostbyname|
gethostent       get next entry from the network hosts file     |perl_gethostent|
getnetbyaddr     get network name by address                    |perl_getnetbyaddr|
getnetbyname     get network address by name                    |perl_getnetbyname|
getnetent        get next line from etc/networks file           |perl_getnetent|
getprotobyname   get protocol number from name                  |perl_getprotobyname|
getprotobynumber get protocoal name from number                 |perl_getprotobynumber|
getprotoent      get the next protocol from /etc/protocols      |perl_getprotoent|
getservbyname    get port number for a service                  |perl_getservbyname|
getservbyport    get the service name of the following port     |perl_getservbyport|
getservent       get next line from /etc/services               |perl_getservent|
sethostent       open host file                                 |perl_sethostent|
setnetent        open network file                              |perl_setnetent|
setprotoent      open the prototype file                        |perl_setprotoent|
setservent       open the service file                          |perl_setservent|

TIME                                                     *perl_functions_time*
gmtime           convert time to its elements                   |perl_gmtime|
localtime        convert time to local time                     |perl_localtime|
time             get the system time                            |perl_time|
times            get CPU times                                  |perl_times|

==============================================================================
FUNCTIONS                                                     *perl_functions*

abs              absolute value.                                |perl_abs|
accept           readies a server to accept connections         |perl_accept|
alarm            send a SIGALRM                                 |perl_alarm|
atan2            arctangent                                     |perl_atan2|
bind             attach address to socket                       |perl_bind|
binmode          handle file as binary                          |perl_binmode|
bless            make an item an object of the classname pkg    |perl_bless|
caller           info about the stack sub calls                 |perl_caller|
chdir            change the working directory                   |perl_chdir|
chmod            change file permissions                        |perl_chmod|
chomp            remove nl char from string                     |perl_chomp|
chop             remove the last char from the string           |perl_chop|
chown            change owner and group of files                |perl_chown|
chr              return char represented by the number          |perl_chr|
chroot           change root directory for the current process  |perl_chroot|
close            close file, socket or pipe                     |perl_close|
closedir         close directory handle                         |perl_closedir|
connect          connect to a process                           |perl_connect|
cos              get the cosine of a number                     |perl_cos|
crypt            one way encryption                             |perl_crypt|
dbmclose         close DBM file associated with hash            |perl_dbmclose|
dbmopen          open DBM file for hash                         |perl_dbmopen|
defined          determine if a variable has a value            |perl_defined|
delete           delete key or keys from hash                   |perl_delete|
die              print out message and exit program             |perl_die|
do               executes commands in the block                 |perl_do|
dump             dump core                                      |perl_dump|
each             return a key and a value for a hash            |perl_each|
endgrent         close the group file                           |perl_endgrent|
endhostent       close the host file                            |perl_endhostent|
endnetent        close the network file                         |perl_endnetent|
endprotoent      close the prototype file                       |perl_endprotoent|
endpwent         close the password file                        |perl_endpwent|
endservent       close the service file                         |perl_endservent|
eof              determine if next read is eof                  |perl_eof|
eval             evaluate the expression to perl program        |perl_eval|
exec             terminate perl and execute a command           |perl_exec|
exists           determine if a key exists in a hash            |perl_exists|
exit             exit perl process                              |perl_exit|
exp              return e to the power of num                   |perl_exp|
fcntl            calls the file control function                |perl_fcntl|
fileno           return the file descriptor                     |perl_fileno|
flock            establish or remove lock on a file             |perl_flock|
fork             spaw a child process                           |perl_fork|
formline         format a list of values                        |perl_formline|
getc             get the next byte from a file                  |perl_getc|
getgrent         get next entry from system group file          |perl_getgrent|
getgrgid         get a group file entry by id                   |perl_getgrgid|
getgrnam         get a group file entry by name                 |perl_getgrnam|
gethostbyaddr    get host name by address                       |perl_gethostbyaddr|
gethostbyname    get host by name                               |perl_gethostbyname|
gethostent       get next entry from the network hosts file     |perl_gethostent|
getlogin         get current login                              |perl_getlogin|
getnetbyaddr     get network name by address                    |perl_getnetbyaddr|
getnetbyname     get network address by name                    |perl_getnetbyname|
getnetent        get next line from etc/networks file           |perl_getnetent|
getpeername      get the address of the peer                    |perl_getpeername|
getpgrp          get process group for the process id           |perl_getpgrp|
getppid          get pid of parent                              |perl_getppid|
getpriority      get process' priority                          |perl_getpriority|
getprotobyname   get protocol number from name                  |perl_getprotobyname|
getprotobynumber get protocoal name from number                 |perl_getprotobynumber|
getprotoent      get the next protocol from /etc/protocols      |perl_getprotoent|
getpwent         get the next line from /etc/passwd             |perl_getpwent|
getpwnam         get password entry for a user                  |perl_getpwnam|
getpwuid         get password entry for a user with uid         |perl_getpwuid|
getservbyname    get port number for a service                  |perl_getservbyname|
getservbyport    get the service name of the following port     |perl_getservbyport|
getservent       get next line from /etc/services               |perl_getservent|
getsockname      get the name of the socket address             |perl_getsockname|
getsockopt       get the value of the socket with option        |perl_getsockopt|
glob             globbing, file name expansion                  |perl_glob|
gmtime           convert time to its elements                   |perl_gmtime|
goto             jump to a label                                |perl_goto|
grep             grep withing an expression                     |perl_grep|
hex              hex string to decimal                          |perl_hex|
index            get the index of the substring                 |perl_index|
int              return integer portion                         |perl_int|
ioctl            call ioctl unix system call                    |perl_ioctl|
join             join string to a single line                   |perl_join|
keys             get all the keys for a hash                    |perl_keys|
kill             send a signal to a list of processes           |perl_kill|
last             immediately exit a loop                        |perl_last|
lc               lowercase a string                             |perl_lc|
lcfirst          lowercase the first char of a string           |perl_lcfirst|
length           length in bytes of a scalar value              |perl_length|
link             create a unix hard link                        |perl_link|
listen           wait for a socket connection                   |perl_listen|
local            declare a variable local                       |perl_local|
localtime        convert time to local time                     |perl_localtime|
log              get the logarithm of a number                  |perl_log|
lstat            return information about a file                |perl_lstat|
map              map out values for an expression               |perl_map|
mkdir            make a directory                               |perl_mkdir|
msgctl           call the msgctl unix system call               |perl_msgctl|
msgget           call the msgget unix system call               |perl_msgget|
msgrcv           call the msgrcv unix system call               |perl_msgrcv|
msgsnd           call the msgsnd unix system call               |perl_msgsnd|
my               define a variable with block scope             |perl_my|
next             jump to the next iteration of the loop         |perl_next|
no               undoes the use function                        |perl_no|
oct              interpret the octal string as a decimal val    |perl_oct|
open             open a file                                    |perl_open|
opendir          open a directory for processing                |perl_opendir|
ord              returnt the numeric ASCII value                |perl_ord|
pack             pack values into a binary structure            |perl_pack|
package          define a namespace                             |perl_package|
pipe             opens a pair of connected pipes                |perl_pipe|
pop              pop an element from an array                   |perl_pop|
pos              return the position of a char                  |perl_pos|
print            print a string                                 |perl_print|
printf           printf function                                |perl_printf|
prototype        returns the prototype of a function            |perl_prototype|
push             pushes an element to an array                  |perl_push|
q/string/        generalized forms of quoting                   |perl_q|
quotemeta        quote meta chars                               |perl_quotemeta|
rand             return a random number                         |perl_rand|
read             read bytes from a file handle                  |perl_read|
readdir          read directory entries from a directory handle |perl_readdir|
readline         read a line from the file handle               |perl_readline|
readlink         gets the name of the file pointed by the link  |perl_readlink|
readpipe         execute a command and return the stdout        |perl_readpipe|
recv             receive a message on a socket                  |perl_recv|
redo             re-start a loop                                |perl_redo|
ref              return the type of an object                   |perl_ref|
rename           change the name of a file                      |perl_rename|
require          require a file, version or package             |perl_require|
reset            clear global variables for loops               |perl_reset|
return           return from a subroutine                       |perl_return|
reverse          reverse the order of a list                    |perl_reverse|
rewinddir        move to the begin of a readdir                 |perl_rewinddir|
rindex           reverse index                                  |perl_rindex|
rmdir            remove a directory                             |perl_rmdir|
scalar           force an expression to be evaluated scalar     |perl_scalar|
seek             position the file pointer of a file handle     |perl_seek|
seekdir          set the position of a readdir                  |perl_seekdir|
select           set the default file handle                    |perl_select|
select           check for readiness of input output            |perl_select2|
semctl           call the unix system function semctl           |perl_semctl|
semget           call the unix system function semget           |perl_semget|
semop            call the unix system function semop            |perl_semop|
send             send a message on a specific socket            |perl_send|
sethostent       open host file                                 |perl_sethostent|
setgrent         open group file                                |perl_setgrent|
setnetent        open network file                              |perl_setnetent|
setpgrp          set the current processes group                |perl_setpgrp|
setpriority      set the process priority                       |perl_setpriority|
setprotoent      open the prototype file                        |perl_setprotoent|
setpwent         open the password file                         |perl_setpwent|
setservent       open the service file                          |perl_setservent|
setsockopt       set the socket option                          |perl_setsockopt|
shift            remove the first value from an array           |perl_shift|
shmctl           call the unix system function shmctl           |perl_shmctl|
shmget           call the unix system function shmget           |perl_shmget|
shmread          read shared memory segment                     |perl_shmread|
shmwrite         write to the shared memory segment             |perl_shmwrite|
shutdown         shutdown a socket connection                   |perl_shutdown|
sin              return the sine of a function                  |perl_sin|
sleep            sleep for n seconds                            |perl_sleep|
socket           open a socket                                  |perl_socket|
socketpair       create a pair of sockets                       |perl_socketpair|
sort             sort a list                                    |perl_sort|
splice           replace elements in a list                     |perl_splice|
split            split a string with pattern                    |perl_split|
sprintf          return string formated with printf             |perl_sprintf|
sqrt             return the squre root of a number              |perl_sqrt|
srand            set the random number seed                     |perl_srand|
stat             returnt the stats on a file                    |perl_stat|
study            study string for many pattern matches          |perl_study|
sub              declare a subroutine                           |perl_sub|
substr           return a sub string                            |perl_substr|
symlink          create a symbolic link                         |perl_symlink|
syscall          call a specific system call                    |perl_syscall|
sysopen          open a system file                             |perl_sysopen|
sysread          read from a system file                        |perl_sysread|
sysseek          set the system file's position                 |perl_sysseek|
system           execute a system program                       |perl_system|
syswrite         write to a system file                         |perl_syswrite|
tell             return the read position of a file             |perl_tell|
telldir          return the read psostion of a readdir          |perl_telldir|
tie              bind a variable to a package class             |perl_tie|
tied             get a reference to an object returned by tie   |perl_tied|
time             get the system time                            |perl_time|
times            get CPU times                                  |perl_times|
truncate         truncate a file                                |perl_truncate|
uc               uppercase a string                             |perl_uc|
ucfirst          upercase the first char of a string            |perl_ucfirst|
umask            set teh umask for a process                    |perl_umask|
undef            undefine the value of an expression            |perl_undef|
unlink           delete a file                                  |perl_unlink|
unpack           unpack a binary structure                      |perl_unpack|
unshift          pre-append an element to an array              |perl_unshift|
untie            break the bind between a var and a package     |perl_untie|
use              use version or modules                         |perl_use|
utime            change the access time of a file               |perl_utime|
values           get the values of a hash                       |perl_values|
vec              treat string as a vector of unsigned ints      |perl_vec|
wait             wait for child process to terminate            |perl_wait|
waitpid          wait for child process with pid                |perl_waitpid|
wantarray        determine if subroutine is wants an array      |perl_wantarray|
warn             produce a warning message                      |perl_warn|
write            write a formated record to a file              |perl_write|

==============================================================================

ABS                                                                 *perl_abs*
------------------------------------------------------------------------------
abs value

Returns the absolute value of its argument (or $_ if omitted).


ACCEPT                                                           *perl_accept*
------------------------------------------------------------------------------
accept newsocket, genericsocket

Readies a server process to accept socket connections from clients. Execution
is suspended until a connection is made, at which time the newsocket
filehandle is opened and attached to the newly made connection. The function
returns the connected address if the call succeeds, or returns false otherwise
(and it puts the error code into $!). genericsocket must be a filehandle
already opened via the socket function and bound to one of the server's
network addresses.

ALARM                                                             *perl_alarm*
------------------------------------------------------------------------------
alarm n

Sends a SIGALRM signal to the executing Perl program after n seconds. On some
older systems, alarms go off "at the top of the second," so, for instance, an
alarm 1 may go off anywhere between 0 to 1 seconds from now, depending on when
in the current second it is. An alarm 2 may go off anywhere from 1 to 2
seconds from now. And so on.

Each call disables the previous timer, and an argument of 0 may be supplied to
cancel the previous timer without starting a new one. The return value is the
number of seconds remaining on the previous timer.

ATAN2                                                             *perl_atan2*
------------------------------------------------------------------------------
atan2 y, x

Returns the arctangent of y/x in the range - to . A quick way to get an
approximate value of  is to say: >

    $pi = atan2(1,1) * 4;
<
For the tangent operation, you may use the POSIX::tan() function, or use the
familiar relation: >

    sub tan { sin($_[0]) / cos($_[0]) }
<
BIND                                                               *perl_bind*
------------------------------------------------------------------------------
bind socket, address

Attaches an address to an already opened socket specified by the socket
filehandle. The function returns true for success, false otherwise (and puts
the error code into $!). address should be a packed address of the proper type
for the socket.

BINMODE                                                         *perl_binmode*
------------------------------------------------------------------------------
binmode filehandle

Arranges for the file to be treated in binary mode on operating systems that
distinguish between binary and text files. It should be called after open but
before any I/O is done on the filehandle. The only way to reset binary mode on
a filehandle is to reopen the file.

binmode has no effect under Unix, Plan9, or other systems that use a single \n
(newline) character as a line delimiter. On systems such as Win32 or MS-DOS,
binmode is needed to prevent the translation of the line delimiter characters
to and from \n.

BLESS                                                             *perl_bless*
------------------------------------------------------------------------------
bless $ref, [classname]

Looks up the item pointed to by reference ref and tells the item that it is
now an object in the classname package - or the current package if no
classname is specified. It returns the reference for convenience, since a
bless is often the last thing in a constructor function. (Always use the
two-argument version if the constructor doing the blessing might be inherited
by a derived class. In such cases, the class you want to bless your object
into will normally be found as the first argument to the constructor in
question.)

CALLER                                                           *perl_caller*
------------------------------------------------------------------------------
caller [n]

Returns information about the stack of current subroutine calls. Without an
argument, it returns the package name in a scalar context, and in a list
context, it returns the package name, filename, and line number that the
currently executing subroutine was called from: >

    ($package, $filename, $line) = caller;
<
With an argument it evaluates n as the number of stack frames to go back
before the current one. It also reports some additional information that the
debugger uses to print a stack trace: >

    $i = 0;
    while (($pack, $file, $line, $subname, $hasargs,
            $wantarray, $evaltext, $is_require) = caller($i++)) {
        ...
    }
<
Furthermore, when called from within the DB package, caller returns more
detailed information: it sets the list variable @DB::args to be the argument
passed in the given stack frame.

CHDIR                                                             *perl_chdir*
------------------------------------------------------------------------------
chdir dirname

Changes the working directory to dirname, if possible. If dirname is omitted,
it changes to the home directory. The function returns 1 upon success, 0
otherwise (and puts the error code into $!).

CHMOD                                                             *perl_chmod*
------------------------------------------------------------------------------
chmod mode, filelist

Changes the permissions of a list of files. The first argument must be the
permissions mode given in its octal number representation. The function
returns the number of files successfully changed. For example: >

    $cnt = chmod 0755, 'file1', 'file2';
<
will set $cnt to 0, 1, or 2, depending on how many files got changed (in the
sense that the operation succeeded, not in the sense that the bits were
different afterward).

CHOMP                                                             *perl_chomp*
------------------------------------------------------------------------------
chomp $var
chomp @list

Removes any line-ending characters of a string in $var, or each string in
@list, that correspond to the current value of $/ (not just any last
character, as chop does). chomp returns the number of characters deleted. If
$/ is empty (in paragraph mode), chomp removes all newlines from the selected
string (or strings, if chomping a list). If no argument is given, the function
chomps the $_ variable.

CHOP                                                               *perl_chop*
------------------------------------------------------------------------------
chop $var
chop @list

Chops off the last character of a string contained in the variable $var (or
strings in each element of a @list) and returns the character chopped. The
chop operator is used primarily to remove the newline from the end of an input
record, but is more efficient than s/\n$//. If no argument is given, the
function chops the $_ variable.

CHOWN                                                             *perl_chown*
------------------------------------------------------------------------------
chown uid, gid, files

Changes the owner and group of a list of files. The first two arguments must
be the numerical uid and gid, in that order. The function returns the number
of files successfully changed.

On most systems, you are not allowed to change the ownership of the file
unless you're the superuser, although you should be able to change the group
to any of your secondary groups. On insecure systems, these restrictions may
be relaxed, but this is not a portable assumption.

CHR                                                                 *perl_chr*
------------------------------------------------------------------------------
chr number

Returns the character represented by number in the character set. For example,
chr(65) is "A" in ASCII.

CHROOT                                                           *perl_chroot*
------------------------------------------------------------------------------
chroot dirname

Changes the root directory for the current process to dirname - the starting
point for pathnames beginning with "/". This directory is inherited across
exec calls and by all subprocesses. There is no way to undo a chroot. Only the
superuser can use this function.

CLOSE                                                             *perl_close*
------------------------------------------------------------------------------
close filehandle

Closes the file, socket, or pipe associated with the given filehandle. You
don't have to close filehandle if you are immediately going to do another open
on it, since the next open will close it for you. However, an explicit close
on an input file resets the line counter ($.), while the implicit close done
by open does not. Closing a pipe will wait for the process executing on the
pipe to complete, and it prevents the script from exiting before the pipeline
is finished. Closing a pipe explicitly also puts the status value of the
command executing on the pipe into $?.

filehandle may be an expression whose value gives a real filehandle name. It
may also be a reference to a filehandle object returned by some of the
object-oriented I/O packages.

CLOSEDIR                                                       *perl_closedir*
------------------------------------------------------------------------------
closedir dirhandle

Closes a directory associated with the given directory handle opened by
opendir.

CONNECT                                                         *perl_connect*
------------------------------------------------------------------------------
connect socket, address

Initiates a connection with another process that is waiting at an accept on
the filehandle socket. The function returns true for success, false otherwise
(and puts the error code into $!). address is a packed network address of the
proper type for socket.

To disconnect a socket, use either close or shutdown.

CONTINUE                                                       *perl_continue*
------------------------------------------------------------------------------
continue

Defining the for loop in terms of a continue block allows us to preserve the
correct semantics even when the loop is continued via a next statement. This
is unlike C, in which there is no way to write the exact equivalent of a
continued for loop without chicanery.

Thus, the following: >

    for ($i = 1; $i < 10; $i++) {
        ...
    }
<
is the same as: >

    $i = 1;
    while ($i < 10) {
        ...
    }
    continue {
        $i++;
    }
<
COS                                                                 *perl_cos*
------------------------------------------------------------------------------
cos num

Returns the cosine of num (expressed in radians). For the inverse cosine
operation, you may use the POSIX::acos() function, or use this relation: >

    sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }
<
CRYPT                                                             *perl_crypt*
------------------------------------------------------------------------------
crypt string, salt

Used by the passwd function on Unix systems to produce a unique 13-character
string (stored in the system's password file) from the first 8 characters of
the given string and the 2-character salt. The Perl function operates the same
way, and returns a 13-character string with the first 2 characters being the
salt. crypt uses a modified version of the Data Encryption Standard, which
produces a one-way encryption; the resulting string cannot be decrypted to
determine the original string. crypt can be used to check that a password is
correct by comparing the string from the function to the string found in
/etc/passwd (if you have permission to do this): >

    if (crypt ($guess, $pass) eq $pass) {
           # guess is correct
       }
<
The variable $pass is the password string from the password file. crypt merely
uses the first two characters from this string for the salt argument.

DBMCLOSE                                                       *perl_dbmclose*
------------------------------------------------------------------------------
dbmclose %hash

Breaks the binding between a DBM file and a hash.

This function is actually just a call to untie with the proper arguments, but
is provided for backward compatibility with older versions of Perl.

DBMOPEN                                                         *perl_dbmopen*
------------------------------------------------------------------------------
dbmopen %hash, dbname, mode

Binds a DBM file (dbname) to a hash (%hash). dbname is the name of the
database without the .dir or .pag extension. If the database does not exist,
and a valid mode is specified, the database is created with the permissions
specified by mode (as modified by the umask). To prevent creation of the
database if it doesn't exist, you may specify a mode of undef, and the
function will return a false value if it can't find an existing database. If
your system supports only the older DBM functions, you may have only one
dbmopen in your program.

Values assigned to the hash prior to the dbmopen are not accessible. If you
don't have write access to the DBM file, you can only read the hash variables,
not set them.

This function is actually just a call to tie with the proper arguments, but is
provided for backward compatibility with older versions of Perl.

DEFINED                                                         *perl_defined*
------------------------------------------------------------------------------
defined expr

Returns a Boolean value saying whether the scalar value resulting from expr
has a real value or not. If no argument is given, defined checks $_.

A scalar that contains no valid string, numeric, or reference value is known
as the undefined value, or undef for short. Many operations return the
undefined value under exceptional conditions, such as end of file,
uninitialized variable, system error, and such. This function allows you to
distinguish between an undefined null string and a defined null string when
you're using operators that might return a real null string.

You can use defined to see if a subroutine exists, that is, if the subroutine
definition has been successfully parsed. However, using defined on an array or
a hash is not guaranteed to produce intuitive results, and should be avoided.

DELETE                                                           *perl_delete*
------------------------------------------------------------------------------
delete $hash{key}
delete @hash{@keys}

Deletes the specified key or keys and associated values from the specified
hash. (It doesn't delete a file. See unlink for that.) Deleting from $ENV{}
modifies the environment. Deleting from a hash that is bound to a (writable)
DBM file deletes the entry from the DBM file.

For normal hashes, the delete function returns the value (not the key) that
was deleted, but this behavior is not guaranteed for tied hashes, such as
those bound to DBM files. To test whether a hash element has been deleted, use
exists.

DIE                                                                 *perl_die*
------------------------------------------------------------------------------
die message

Prints message to the standard error output and exits the Perl program with a
nonzero exit status. message can be a list value, like the arguments to print,
from which the elements are concatenated into a single string for output. If
message does not end with a newline (\n), the current script filename, line
number, and input line number (if any) are appended to the message with a
newline. With no argument, the function outputs the string Died as its
default.

die exits the programs with the current value of the $! variable, which
contains the text describing the most recent operating system error value.
This value can be used in the message to describe what the problem may have
been.

die behaves differently inside an eval statement. It places the error message
in the $@ variable and aborts the eval, which returns an undefined value. This
use of die can raise runtime exceptions that can be caught at a higher level
of the program.

DO                                                                   *perl_do*
------------------------------------------------------------------------------
do {block}

Executes the sequence of commands in the block and returns the value of the
last expression evaluated. When modified by a loop modifier, Perl executes the
block once before testing the loop condition. (On other statements, the loop
modifiers test the conditional first.)

DUMP                                                               *perl_dump*
------------------------------------------------------------------------------
dump label

During program execution, causes an immediate core dump after code previous to
it has already been executed. Primarily, this is so that you can use the
undump program to turn your core dump into an executable binary after having
initialized all your variables at the beginning of the program. dump arranges
for the revived binary, when run, to begin by executing a goto label (with all
the restrictions that goto suffers). Think of the operation as a goto with an
intervening core dump and reincarnation. If label is omitted, the function
arranges for the program to restart from the top. Please note that any files
opened at the time of the dump will not be open any more when the program is
reincarnated. See also the -u command-line switch.

The undump program is not available on all systems, and may not be compatible
with specific ports of Perl.

EACH                                                               *perl_each*
------------------------------------------------------------------------------
each %hash

Returns a two-element list consisting of the key and value for the next
element of a hash. With successive calls to each, you can iterate over the
entire hash. Entries are returned in an indeterminate order. When the hash is
entirely read, a null list is returned. The next call to each after that will
start a new iteration. The iterator can be reset either by reading all the
elements from the hash, or by calling the keys function in scalar context. You
must not add elements to the hash while iterating over it, although you are
permitted to use delete. In a scalar context, each returns just the key.

There is a single iterator for each hash, shared by all each, keys, and values
function calls in the program. This means that after a keys or values call,
the next each call will start again from the beginning.

ENDGRENT                                                       *perl_endgrent*
------------------------------------------------------------------------------
endgrent

Closes the groups file (usually /etc/group on Unix systems) if open. Not
implemented on Win32 systems.

ENDHOSTENT                                                   *perl_endhostent*
------------------------------------------------------------------------------
endhostent

Closes the hosts file (usually /etc/hosts on Unix systems) if open. Not
implemented on Win32 systems.

ENDNETENT                                                     *perl_endnetent*
------------------------------------------------------------------------------
endnetent

Closes the networks file (usually /etc/networks on Unix systems) if open. Not
implemented on Win32 systems.

ENDPROTOENT                                                 *perl_endprotoent*
------------------------------------------------------------------------------
endprotoent

Closes the prototypes file (usually /etc/prototypes on Unix systems) if open.
Not implemented on Win32 systems.

ENDPWENT                                                       *perl_endpwent*
------------------------------------------------------------------------------
endpwent

Closes the password file (/etc/passwd or equivalent on Unix systems) if open.
Not implemented on Win32 systems.

ENDSERVENT                                                   *perl_endservent*
------------------------------------------------------------------------------
endservent

Closes the services file (usually /etc/services on Unix systems) if open. Not
implemented on Win32 systems.

EOF                                                                 *perl_eof*
------------------------------------------------------------------------------
eof filehandle
eof()

Returns true if the next read on filehandle will return end-of-file, or if
filehandle is not open. filehandle may be an expression whose value gives the
real filehandle name. An eof without an argument returns the end-of-file
status for the last file read. Empty parentheses () may be used in connection
with the combined files listed on the command line. That is, inside a while
(<>) loop, eof() will detect the end of only the last of a group of files. Use
eof(ARGV) or eof (without the parentheses) to test each file in a while (<>)
loop. For example, the following code inserts dashes just before the last line
of the last file: >

    while (<>) {
        if (eof()) {
            print "-" x 30, "\n";
        }
        print;
    }
<
EVAL                                                               *perl_eval*
------------------------------------------------------------------------------
eval string
eval {block}

Evaluates the expression or code in its argument at runtime as a separate Perl
program within the context of the larger script. Any variable settings remain
afterward, as do any subroutine or format definitions. The code of the eval is
treated as a block, so any locally scoped variables declared within the eval
last only until the eval is done. (See also local and my.) The value returned
from an eval is the value of the last expression evaluated. Like subroutines,
you may also use the return function to return a value and exit the eval.

With eval string, the contents of string are compiled and executed at runtime.
For example: >

    $a = 3, $b = 4;
    $c = '$a * $b';
    print (eval "$c"); # prints 12
<
The string form of eval is useful for executing strings produced at runtime
from standard or other dynamic input sources. If the string produces an error,
either from syntax or at runtime, the eval exits with the undefined value and
places the error in $@. If string is omitted, the operator evaluates $_.

The block form of eval is used in Perl programs to handle runtime errors
(exceptions). The code in block is compiled only once during the compilation
of the main program. If there is a syntax error in the block it will produce
an error at compile time. If the code in block produces a runtime error (or if
a die statement is encountered), the eval exits, and the error is placed in
$@. For example, the following code can be used to trap a divide-by-zero error
at runtime: >

    eval {
          $a = 10; $b = 0;
          $c = $a / $b;     # causes runtime error
                            # trapped by eval
         };
    print $@;               # Prints  "Illegal division by 0 at try.pl line 3"
<
As with any code in a block, a final semicolon is not required.

EXEC                                                               *perl_exec*
------------------------------------------------------------------------------
exec command

Terminates the currently running Perl script and executes the program named in
command. The Perl program does not resume after the exec unless the exec
cannot be run and produces an error. Unlike system, the executed command is
not forked off into a child process. An exec completely replaces the script in
its current process.

command may be a scalar containing a string with the name of the program to
run and any arguments. This string is checked for shell metacharacters, and if
there are any, passes the string to /bin/sh/ -c for parsing. Otherwise, the
string is read as a program command, bypassing any shell processing. The first
word of the string is used as the program name, with any remaining words used
as arguments.

command may also be a list value where the first element is parsed as the
program name and remaining elements as arguments. For example: >

    exec 'echo', 'Your arguments are: ', @ARGV;
<
The exec function is not implemented for Perl on Win32 platforms.

EXISTS                                                           *perl_exists*
------------------------------------------------------------------------------
exists $hash{$key}

Returns true if the specified hash key exists, even if the corresponding value
is undefined.

EXIT                                                               *perl_exit*
------------------------------------------------------------------------------
exit status

Exits the current Perl process immediately with that value given by status.
This could be the entire Perl script you are running, or only a child process
created by fork. Here's a fragment that lets a user exit the program by typing
x or X: >

    $ans = <STDIN>;
    exit 0 if $ans =~ /^[Xx]/;
<
If status is omitted, the function exits with 0. You shouldn't use exit to
abort a subroutine if there's any chance that someone might want to trap
whatever error happened. Use die instead, which can be trapped by an eval.

EXP                                                                 *perl_exp*
------------------------------------------------------------------------------
exp num

Returns e to the power of num. If num is omitted, it gives exp($_). To do
general exponentiation, use the ** operator.

FCNTL                                                             *perl_fcntl*
------------------------------------------------------------------------------
fcntl filehandle, function, arg

Calls the file control function (with the function-specific arg) to use on the
file or device opened with filehandle. fcntl calls Unix's fcntl function (not
available on Win32 platforms). If the function is not implemented, the program
exits with a fatal error. fcntl sets file descriptors for a filehandle. This
built-in command is usable when you use the Fcntl module in the standard
distribution: >

    use Fcntl;
<
This module imports the correct function definitions. See the description of
the Fcntl module in Chapter 8, Standard Modules.

The return value of fcntl (and ioctl) is as follows: >

    System call returns     Perl returns
      -1                      Undefined value
       0                      String "0 but true"
      Anything else           That number
<
Thus Perl returns true on success and false on failure, yet you can still
easily determine the actual value returned by the operating system.

FILENO                                                           *perl_fileno*
------------------------------------------------------------------------------
fileno filehandle

Returns the file descriptor for a filehandle. (A file descriptor is a small
integer, unlike the filehandle, which is a symbol.) It returns undef if the
handle is not open. It's useful for constructing bitmaps for select, and for
passing to certain obscure system calls if syscall is implemented. It's also
useful for double-checking that the open function gave you the file descriptor
you wanted.

FLOCK                                                             *perl_flock*
------------------------------------------------------------------------------
flock filehandle, operation

Establishes or removes a lock on a file opened with filehandle. This function
calls one of the Unix functions flock, lockf, or the locking capabilities of
fcntl, whichever your system supports. If none of these functions exist on
your system, flock will produce a fatal error.

operation is the type of locking function to perform. The number by each
operation name is the argument that Perl's flock takes by default. You may
also use the operation names if you explicitly import them from the Fcntl
module with use Fcntl ":flock".

    LOCK_SH (1)
        Establishes a shared lock on the file (read lock).

    LOCK_EX (2)
        Establishes an exclusive lock on the file (write lock).

    LOCK_UN (8)
        Removes a lock from the file.

    LOCK_NB (4)
        Prevents flock from blocking while trying to establish a lock with LOCK_SH
        or LOCK_EX and instructs it to return immediately. LOCK_NB must be ored
        with the other operation as an expression for the operation argument,
        i.e., (LOCK_EX | LOCK_NB).

FORK                                                               *perl_fork*
------------------------------------------------------------------------------
fork

Spawns a child process that executes the code immediately following the fork
call until the process is terminated (usually with an exit). The child process
runs parallel to the parent process and shares all the parent's variables and
open filehandles. The function returns the child pid to the parent process and
0 to the child process on success. If it fails, it returns the undefined value
to the parent process, and no child process is created. If you fork your child
processes, you'll have to wait on their zombies when they die. See the wait
function for more information. The fork function is unlikely to be implemented
on any operating system not resembling Unix, unless it purports POSIX
compliance.

FORMAT                                                           *perl_format*
------------------------------------------------------------------------------
format

A format is defined using a format definition. This format definition can
appear anywhere in your program text, like a subroutine. A format definition
looks like this: >

    format someformatname =
    fieldline
    value_one, value_two, value_three
    fieldline
    value_one, value_two
    fieldline
    value_one, value_two, value_three
    .
<
The first line contains the reserved word format, followed by the format name
and then an equal sign (=). The format name is chosen from yet another
namespace, and follows the same rule as everything else. Because format names
are never used within the body of the program (except within string values),
you can safely use names that are identical to reserved words. As you'll see
in the following section, "Invoking a Format," most of your format names will
probably be the same as filehandle names (which then makes them not the same
as reserved words...oh well).

Following the first line comes the template itself, spanning zero or more text
lines. The end of the template is indicated by a line consisting of a single
dot by itself.[2] Templates are sensitive to whitespace; this instance is one
of the few in which the kind and amount of whitespace (space, newline, or tab)
in the text of a Perl program actually matters.

[2] In text files, the last line needs to end with a newline to work properly.

The template definition contains a series of fieldlines. Each fieldline may
contain fixed text - text that will be printed out literally when the format
is invoked. Here's an example of a fieldline with fixed text: >

    Hello, my name is Fred Flintstone.
<
Fieldlines may also contain fieldholders for variable text. If a line contains
fieldholders, the following line of the template (called the value line)
dictates a series of scalar values - one per fieldholder - that provide the
values that will be plugged into the fields. Here's an example of a fieldline
with one fieldholder and the value line that follows: >

    Hello, my name is @<<<<<<<<<<
    $name
<
The fieldholder is the @<<<<<<<<<<, which specifies a left-justified text
field with 11 characters. More complete details about fieldholders will be
given in the section called "More About the Fieldholders" later in this
chapter.

If the fieldline has multiple fieldholders, it needs multiple values, so the
values are separated on the value line by commas: >

    Hello, my name is @<<<<<<<<<< and I'm @<< years old.
    $name, $age
<
Putting all this together, we can create a simple format for an address label:
>
    format ADDRESSLABEL =
    ===============================
    | @<<<<<<<<<<<<<<<<<<<<<<<<<< |
    $name
    | @<<<<<<<<<<<<<<<<<<<<<<<<<< |
    $address
    | @<<<<<<<<<<<<<<<<, @< @<<<< |
    $city,          $state, $zip
    ===============================
    .
<
Note that the lines of equal signs at the top and bottom of the format have no
fields, and thus have no value lines following. (If you put a value line
following such a fieldline, it will be interpreted as another fieldline, and
will most likely not do what you want.)

Whitespace within the value line is ignored. Some people choose to use
additional whitespace in the value line to line up the variable with the
fieldholder on the preceding line (such as putting $zip underneath the third
field of the previous line in this example), but that's just for looks. Perl
doesn't care, and the change doesn't affect your output.

Text after the first newline in a value is discarded (except in the special
case of multiline fieldholders, described later).

A format definition is like a subroutine definition. It doesn't contain
immediately executed code, and can therefore be placed anywhere in the file
with the rest of the program - we tend to put ours toward the end of the file,
ahead of my subroutine definitions.

FORMLINE                                                       *perl_formline*
------------------------------------------------------------------------------
formline picture, variables

Internal function used by formats, although you may also call it. It formats a
list of values (variables) according to the contents of picture, placing the
output into the format output accumulator, $^A. When a write is done, the
contents of $^A are written to some filehandle, but you could also read $^A
yourself and set $^A back to "". Note that a format typically does one
formline per line of form, but the formline function itself doesn't care how
many newlines are embedded in the picture. This means that the ~ and ~~ tokens
will treat the entire picture as a single line. Thus, you may need to use
multiple formlines to implement a single record-format, like the format
compiler.

Be careful if you put double quotes around the picture, since an @ character
may be taken to mean the beginning of an array name. formline always returns
true. See Section 4.10, "Formats" in Chapter 4 for more information.

GETC                                                               *perl_getc*
------------------------------------------------------------------------------
getc filehandle

Returns the next byte from the input file attached to filehandle. At
end-of-file, it returns a null string. If filehandle is omitted, the function
reads from STDIN. This operator is very slow, but is occasionally useful for
single-character input from the keyboard.

GETGRENT                                                       *perl_getgrent*
------------------------------------------------------------------------------
getgrent

Returns the next entry from the systems group file (usually /etc/group on Unix
systems) starting from the top. Returns null when EOF is reached. The return
value from getgrent in list context is: >

    ($name, $passwd, $gid, $members)
<
where $members contains a space-separated list of the login names of the
members of the group. In scalar context, getgrent returns only the group name.

GETGRGID                                                       *perl_getgrgid*
------------------------------------------------------------------------------
getgrgid gid

Retrieves a group file (/etc/group) entry by group number gid. The return
value in list context is: >

    ($name, $passwd, $gid, $members)
<
where $members contains a space-separated list of the login names of the
members of the group. If you want to do this repeatedly, consider caching the
data in a hash using getgrent. In scalar context, getgrgid returns only the
group name.

GETGRNAM                                                       *perl_getgrnam*
------------------------------------------------------------------------------
getgrnam name

Retrieves a group file entry by the group name name. The return value in list
context is: >

    ($name, $passwd, $gid, $members)
<
where $members contains a space-separated list of the login names of the
members of the group. In scalar context, getgrnam returns only the numeric
group ID.

GETHOSTBYADDR                                             *perl_gethostbyaddr*
------------------------------------------------------------------------------
gethostbyaddr address, [addrtype]

Retrieves the hostname (and alternate addresses) of a packed binary network
address. (addrtype indicates the type of address given. Since gethostbyaddr is
used almost solely for Internet IP addresses, addrtype is not needed.) The
return value in list context is: >

    ($name, $aliases, $addrtype, $length, @addrs)
<
where @addrs is a list of packed binary addresses. In the Internet domain,
each address is four bytes long and can be unpacked by saying something like:
>
    ($a, $b, $c, $d) = unpack('C4', $addrs[0]);
    In scalar context, gethostbyaddr returns only the hostname.
<
GETHOSTBYNAME                                             *perl_gethostbyname*
------------------------------------------------------------------------------
gethostbyname name

Retrieves the address (and other names) of a network hostname. The return
value in list context is: >

    ($name, $aliases, $addrtype, $length, @addrs)
<
where @addrs is a list of raw addresses. In scalar context, gethostbyname
returns only the host address.

GETHOSTENT                                                   *perl_gethostent*
------------------------------------------------------------------------------
gethostent

Retrieves the next entry from your system's network hosts file (usually
/etc/hosts on Unix). The return value from gethostent is: >

    ($name, $aliases, $addrtype, $length, @addrs)
<
where @addrs is a list of raw addresses. Scripts that use this function should
not be considered portable.

GETLOGIN                                                       *perl_getlogin*
------------------------------------------------------------------------------
getlogin

Returns the current login from /etc/utmp (Unix systems only), if any. If null,
use getpwuid. For example: >

    $login = getlogin || getpwuid($<) || "Intruder!!";
<
GETNETBYADDR                                               *perl_getnetbyaddr*
------------------------------------------------------------------------------
getnetbyaddr address, [addrtype]

Retrieves the network name or names of the given network address. (addrtype
indicates the type of address. Often this function is used for IP addresses,
where the type is not needed.) The return value in list context is: >

    ($name, $aliases, $addrtype, $net)
<
In scalar context, getnetbyaddr returns only the network name.

GETNETBYNAME                                               *perl_getnetbyname*
------------------------------------------------------------------------------
getnetbyname name

Retrieves the network address of a network name. The return value in list
context is: >

    ($name, $aliases, $addrtype, $net)
<
In scalar context, getnetbyname returns only the network address.

GETNETENT                                                     *perl_getnetent*
------------------------------------------------------------------------------
getnetent

Retrieves the next line from your /etc/networks file, or system equivalent.
The return value in list context is: >

    ($name, $aliases, $addrtype, $net)
<
In scalar context, getnetent returns only the network name.

GETPEERNAME                                                 *perl_getpeername*
------------------------------------------------------------------------------
getpeername socket

Returns the packed socket address of the other end of the socket connection.
For example: >

    use Socket;
    $hersockaddr = getpeername SOCK;
    ($port, $heraddr) = unpack_sockaddr_in($hersockaddr);
    $herhostname = gethostbyaddr($heraddr, AF_INET);
    $herstraddr = inet_ntoa($heraddr);
<

GETPGRP                                                         *perl_getpgrp*
------------------------------------------------------------------------------
getpgrp pid

Returns the current process group for the specified process ID (pid). Use a
pid of 0 for the current process. Invoking getpgrp will produce a fatal error
if used on a machine that doesn't implement the getpgrp system call. If pid is
omitted, the function returns the process group of the current process (the
same as using a pid of 0). On systems implementing this operator with the
POSIX getpgrp(2) system call, pid must be omitted or, if supplied, must be 0.

GETPPID                                                         *perl_getppid*
------------------------------------------------------------------------------
getppid

Returns the process ID of the parent process. On the typical Unix system, if
your parent process ID changes to 1, your parent process has died and you've
been adopted by the init program.

GETPRIORITY                                                 *perl_getpriority*
------------------------------------------------------------------------------
getpriority type, id

Returns the current priority for a process, a process group, or a user. type
indicates which of these three process types to return. (The type identifiers
are system-specific. Consult the manpage for getpriority.) The id gives the
specific ID of the corresponding process type in type: a process ID, a
process-group ID, or a user ID. The value 0 in who gives the priority for the
current process, process group, or user.

The priority will be an integer value. Lower values indicate higher priority
(negative values may be returned on some systems). Invoking getpriority will
produce a fatal error if used on a machine that doesn't implement the
getpriority system call.

GETPROTOBYNAME                                           *perl_getprotobyname*
------------------------------------------------------------------------------
getprotobyname name

Translates a protocol name to its corresponding number. The return value in
list context is: >

    ($name, $aliases, $protocol_number)
<
In scalar context, getprotobyname returns only the protocol number.

GETPROTOBYNUMBER                                       *perl_getprotobynumber*
------------------------------------------------------------------------------
getprotobynumber number

Translates a protocol number to its corresponding name. The return value in
list context is: >

    ($name, $aliases, $protocol_number)
<
In scalar context, getprotobynumber returns only the protocol name.

GETPROTOENT                                                 *perl_getprotoent*
------------------------------------------------------------------------------
getprotoent

Retrieves the next line from the /etc/protocols file (on some Unix systems).
Returns null at the end of the file. The return value from getprotoent is: >

    ($name, $aliases, $protocol_number)
<
In scalar context, getprotoent returns only the protocol name.

GETPWENT                                                       *perl_getpwent*
------------------------------------------------------------------------------
getpwent

Retrieves the next line from the /etc/passwd file (or its equivalent coming
from some server somewhere). Returns null at the end of the file. The return
value in list context is: >

    ($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)
<
Some machines may use the quota and comment fields for other purposes, but the
remaining fields will always be the same. To set up a hash for translating
login names to uids, do this: >

    while (($name, $passwd, $uid) = getpwent) {
        $uid{$name} = $uid;
    }
<
In scalar context, getpwent returns only the username.

GETPWNAM                                                       *perl_getpwnam*
------------------------------------------------------------------------------
getpwnam name

Retrieves the passwd file entry of a user, name. The return value in list
context is: >

    ($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)
<
If you want to do this repeatedly, consider caching the data in a hash using
getpwent.

In scalar context, getpwnam returns only the numeric user ID.

GETPWUID                                                       *perl_getpwuid*
------------------------------------------------------------------------------
getpwuid uid

Retrieves the passwd file entry with the user ID uid. The return value in list
context is: >

    ($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)
<
If you want to do this repeatedly, consider slurping the data into a hash
using getpwent.

In scalar context, getpwuid returns the username.

GETSERVBYNAME                                             *perl_getservbyname*
------------------------------------------------------------------------------
getservbyname name, proto

Translates a service (port) name to its corresponding port number. proto is a
protocol name such as "tcp". The return value in list context is: >

    ($name, $aliases, $port_number, $protocol_name)
<
In scalar context, getservbyname returns only the service port number.

GETSERVBYPORT                                             *perl_getservbyport*
------------------------------------------------------------------------------
getservbyport port, proto

Translates a service (port) number to its corresponding names. proto is a
protocol name such as "tcp". The return value in list context is: >

    ($name, $aliases, $port_number, $protocol_name)
<
In scalar context, getservbyport returns only the service port name.

GETSERVENT                                                   *perl_getservent*
------------------------------------------------------------------------------
getservent

Retrieves the next listing from the /etc/services file or its equivalent.
Returns null at the end of the file. The return value in list context is: >

    ($name, $aliases, $port_number, $protocol_name)
<
In scalar context, getservent returns only the service port name.

GETSOCKNAME                                                 *perl_getsockname*
------------------------------------------------------------------------------
getsockname socket

Returns the packed socket address of this end of the socket connection.

GETSOCKOPT                                                   *perl_getsockopt*
------------------------------------------------------------------------------
getsockopt socket, level, optname

Returns the value of the socket option optname, or the undefined value if
there is an error. level identifies the protocol level used by socket. Options
vary for different protocols. See also setsockopt.

GLOB                                                               *perl_glob*
------------------------------------------------------------------------------
glob expr

Performs filename expansion (globbing) on expr, returning the next successive
name on each call. If expr is omitted, $_ is globbed instead. This is the
internal function implementing the <*> operator, except that it may be easier
to type this way.

The glob function is not related to the Perl notion of typeglobs, other than
that they both use a * to represent multiple items.

GMTIME                                                           *perl_gmtime*
------------------------------------------------------------------------------
gmtime expr

Converts a time string as returned by the time function to a nine-element list
with the time correct for Greenwich Mean Time zone (a.k.a. GMT, UTC, etc.).
Typically used as follows: >

    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
            gmtime(time);
<
All list elements are numeric and come straight out of a C language struct tm.
In particular this means that $mon has the range 0..11, $wday has the range
0..6, and the year has had 1,900 subtracted from it. (You can remember which
ones are 0-based because those are the ones you're always using as subscripts
into 0-based arrays containing month and day names.) If expr is omitted, it
does gmtime(time). For example, to print the current month in London: >

    $london_month = (qw(Jan Feb Mar Apr May Jun
            Jul Aug Sep Oct Nov Dec))[(gmtime)[4]];
<
The Perl library module Time::Local contains a subroutine, timegm(), that can
convert in the opposite direction.

In scalar context, gmtime returns a ctime(3)-like string based on the GMT time
value.

GOTO                                                               *perl_goto*
------------------------------------------------------------------------------
goto label
goto &name

Finds the statement labeled with label (or an expression that evaluates to a
label) and resumes execution there. It may not be used to go into any
construct that requires initialization, such as a subroutine or a foreach
loop. It also can't be used to go into a construct that is optimized away. It
can be used to go almost anywhere else within the dynamic scope, including out
of subroutines, but for that purpose it's usually better to use some other
construct such as last or die.

goto &name substitutes a call to the named subroutine for the currently
running subroutine. This is used by AUTOLOAD subroutines that wish to load
another subroutine and then pretend that this subroutine - and not the
original one - had been called in the first place (except that any
modifications to @_ in the original subroutine are propagated to the
replacement subroutine). After the goto, not even caller will be able to tell
that the original routine was called first.

GREP                                                               *perl_grep*
------------------------------------------------------------------------------
grep expr, list
grep {block} list

Evaluates expr or block in a Boolean context for each element of list,
temporarily setting $_ to each element in turn. In list context, it returns a
list of those elements for which the expression is true. Mostly used like Unix
grep where expr is a search pattern, and list elements that match are
returned. In scalar context, grep returns the number of times the expression
was true.

For example, presuming @all_lines contains lines of code, this example weeds
out comment lines: >

    @code_lines = grep !/^#/, @all_lines;
<
HEX                                                                 *perl_hex*
------------------------------------------------------------------------------
hex hexnum

Converts a hexadecimal string hexnum into its equivalent decimal value. If
hexnum is omitted, it interprets $_. The following code sets $number to
4,294,906,560: >

    $number = hex("ffff12c0");
<
To do the inverse function, use: >

    sprintf "%lx", $number;   # (That's a letter 'l', not a one.)
<
INDEX                                                             *perl_index*
------------------------------------------------------------------------------
index string, substr, [start]

Returns the position of the first occurrence of substr in string. The start,
if specified, specifies the position to start looking in the string. Positions
are integer numbers based at 0. If the substring is not found, the index
function returns -1.

IMPORT                                                           *perl_import*
------------------------------------------------------------------------------
There is no built-in import function. It is merely an ordinary class method
defined (or inherited) by modules that wish to export names to another module
through the use operator. See use for details. >

    import CLASSNAME LIST
    import CLASSNAME
<
INT                                                                 *perl_int*
------------------------------------------------------------------------------
int num

Returns the integer portion of num. If num is omitted, the function uses $_.

IOCTL                                                             *perl_ioctl*
------------------------------------------------------------------------------
ioctl filehandle, function, arg

Calls the ioctl Unix system call to perform function (with the
function-specific arg) on the file or device opened with filehandle. See fcntl
for a description of return values.

JOIN                                                               *perl_join*
------------------------------------------------------------------------------
join char, list

Joins the separate strings of list into a single string with fields separated
by the value of char, and returns the string. For example: >

    $_ = join ':', $login,$passwd,$uid,$gid,$gcos,$home,$shell;
<
To do the opposite, see split. To join things together into fixed-position
fields, see pack.

KEYS                                                               *perl_keys*
------------------------------------------------------------------------------
keys %hash

Returns a list consisting of all the keys of the named hash. The keys are
returned in an apparently random order, but it is the same order that either
the values or each function produces (assuming that the hash has not been
modified between calls).

In scalar context, keys returns the number of elements of the hash (and resets
the each iterator).

keys can be used as an lvalue to increase the number of hash buckets allocated
for the hash: >

    keys %hash = 200;
<
KILL                                                               *perl_kill*
------------------------------------------------------------------------------
kill sig, processes

Sends a signal, sig, to a list of processes. You may use a signal name in
quotes (without a SIG on the front). This function returns the number of
processes successfully signaled. If the signal is negative, the function kills
process groups instead of processes.

LAST                                                               *perl_last*
------------------------------------------------------------------------------
last label

Immediately exits the loop identified by label. If label is omitted, the
command refers to the innermost enclosing loop.

LC                                                                   *perl_lc*
------------------------------------------------------------------------------
lc string

Returns a lowercase version of string (or $_ if omitted). This is the internal
function implementing the \L escape in double-quoted strings.

LCFIRST                                                         *perl_lcfirst*
------------------------------------------------------------------------------
lcfirst string

Returns a version of string (or $_ if omitted) with the first character
lowercased. This is the internal function implementing the \l escape in
double-quoted strings.

LENGTH                                                           *perl_length*
------------------------------------------------------------------------------
length val

Returns the length in bytes of the scalar value val. If val is omitted, the
function returns the length of $_.

Do not try to use length to find the size of an array or hash. Use scalar
@array for the size of an array, and scalar keys %hash for the size of a hash.

LINK                                                               *perl_link*
------------------------------------------------------------------------------
link oldfile, newfile

Creates a Unix hard link from a new filename, newfile, to an existing file,
oldfile, on the same filesystem. The function returns 1 for success, 0
otherwise (and puts the error code into $!). This function is unlikely to be
implemented on non-Unix systems. See also symlink.

LISTEN                                                           *perl_listen*
------------------------------------------------------------------------------
listen socket, queuesize

Tells the operating system that you are ready to accept connections on socket
and sets the number of waiting connections to queuesize. If the queue is full,
clients trying to connect to the socket will be refused connection.

LOCAL                                                             *perl_local*
------------------------------------------------------------------------------
local vars

Declares one or more global variables vars to have temporary values within the
innermost enclosing block, subroutine, eval, or file. The new value is
initially undef for scalars and () for arrays and hashes. If more than one
variable is listed, the list must be placed in parentheses, because the
operator binds more tightly than a comma. All the listed variables must be
legal lvalues, that is, something you could assign to. This operator works by
saving the current values of those variables on a hidden stack and restoring
them upon exiting the block, subroutine, or eval, or file.

Subroutines called within the scope of a local variable will see the localized
inner value of the variable. The technical term for this process is "dynamic
scoping." Use my for true private variables.

LOCALTIME                                                     *perl_localtime*
------------------------------------------------------------------------------
localtime val

Converts the value returned by time to a nine-element list with the time
corrected for the local time zone. It's typically used as follows: >

    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
            localtime(time);
<
All list elements are numeric. The element $mon (month) has the range 0..11,
and $wday (weekday) has the range 0..6. The year has had 1,900 subtracted from
it. (You can remember which ones are 0-based because those are the ones you're
always using as subscripts into 0-based arrays containing month and day
names.) If val is omitted, it does localtime(time). For example, to get the
name of the current day of the week: >

    $thisday = (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[(localtime)[6]];
<
The Perl library module Time::Local contains a subroutine, timelocal(), that
can convert in the opposite direction.

In scalar context, localtime returns a ctime(3)-like string based on the
localtime value.

LOG                                                                 *perl_log*
------------------------------------------------------------------------------
log num

Returns logarithm (base e) of num. If num is omitted, the function uses $_.

LSTAT                                                             *perl_lstat*
------------------------------------------------------------------------------
lstat file

Like stat, returns information on file, except that if file is a symbolic
link, lstat returns information about the link; stat returns information about
the file pointed to by the link. (If symbolic links are unimplemented on your
system, a normal stat is done instead.)

M                                                                     *perl_m*
------------------------------------------------------------------------------
m

Allows you to specify a different delimiter character for regular expressions.
Simply precede any nonalphanumeric, nonwhitespace character[5] (your selected
delimiter) with an m, then list your pattern followed by another identical
delimiter character, and you're done, as in:

[5] If the delimiter happens to be the left character of a left-right pair
(parentheses, braces, angle bracket, or square bracket), the closing delimiter
is the corresponding right of the same pair. But otherwise, the characters are
the same for begin and end. >

    /^\/wwwroot\/docs/ # using standard slash delimiter
    m@^/wwwroot/docs@  # using @ for a delimiter
    m#^/wwwroot/docs#  # using # for a delimiter (my favorite)
<
You can even use slashes again if you want, as in m/fred/. So the common
regular-expression matching operator is really the m operator; however, the m
is optional if you choose slash for a delimiter.

MAP                                                                 *perl_map*
------------------------------------------------------------------------------
map {block} list
map expr, list

Evaluates the block or expr for each element of list (locally setting $_ to
each element) and returns the list value composed of the results of each such
evaluation. It evaluates block or expr in a list context, so each element of
list may produce zero, one, or more elements in the returned value. These are
all flattened into one list. For instance: >

    @words = map { split ' ' } @lines;
<
splits a list of lines into a list of words. Often, though, there is a
one-to-one mapping between input values and output values: >

    @chars = map chr, @nums;
<
This statement translates a list of numbers to the corresponding characters.

MKDIR                                                             *perl_mkdir*
------------------------------------------------------------------------------
mkdir filename, mode

Creates the directory specified by filename, with permissions specified by the
numeric mode (as modified by the current umask). If it succeeds, it returns 1;
otherwise, it returns 0 and sets $! (from the value of errno).

MSGCTL                                                           *perl_msgctl*
------------------------------------------------------------------------------
msgctl id, cmd, arg

Calls the msgctl system call, which is used to perform different control
operations on IPC message queues. See the msgctl documentation on your system
for details. If cmd is &IPC_STAT, then arg must be a variable that will hold
the returned msqid_ds structure. The return values work like those of fnctl:
the undefined value for error, "0 but true" for zero, or the actual return
value otherwise. On error, it puts the error code into $!. Before calling, you
should say: >

    require "ipc.ph";
    require "msg.ph";
<
This function is available only on machines supporting System V IPC.

MSGGET                                                           *perl_msgget*
------------------------------------------------------------------------------
msgget key, flags

Calls the System V IPC msgget system call. See the msgget documentation on
your system for details. The function returns the message queue ID, or the
undefined value if there is an error. On error, it puts the error code into
$!. Before calling, you should say: >

    require "ipc.ph";
    require "msg.ph";
<
This function is available only on machines supporting System V IPC.

MSGRCV                                                           *perl_msgrcv*
------------------------------------------------------------------------------
msgrcv id, var, size, type, flags

Calls the System V IPC msgrcv system call to receive a message from message
queue id into variable var with a maximum message size of size. When a message
is received, the message type will be the first thing in var, and the maximum
length of var is size plus the size of the message type. The function returns
true if successful, or false if there is an error. On error, it puts the error
code into $!. Before calling, you should say: >

    require "ipc.ph";
    require "msg.ph";
<
This function is available only on machines supporting System V IPC.

MSGSND                                                           *perl_msgsnd*
------------------------------------------------------------------------------
msgsnd id, msg, flags

Calls the System V IPC msgsnd system call to send the message msg to the
message queue id. msg must begin with the long integer message type. You can
create a message like this: >

    $msg = pack "L a*", $type, $text_of_message;
<
The function returns true if successful, or false if there is an error. On
error, it puts the error code into $!. Before calling, you should say: >

    require "ipc.ph";
    require "msg.ph";
<
This function is available only on machines supporting System V IPC.

MY                                                                   *perl_my*
------------------------------------------------------------------------------
my vars

Declares one or more private variables to exist only within the innermost
enclosing block, subroutine, eval, or file. The new value is initially undef
for scalars and () for arrays and hashes. If more than one variable is listed,
the list must be placed in parentheses, because the operator binds more
tightly than a comma. Only simple scalars or complete arrays and hashes may be
declared this way. The variable name may not be package-qualified, because
package variables are all global, and private variables are not related to any
package.

Unlike local, this operator has nothing to do with global variables, other
than hiding any other variable of the same name from view within its scope. (A
global variable can always be accessed through its package-qualified form or a
symbolic reference, however.) A private variable is not visible until the
statement after its declaration. Subroutines called from within the scope of
such a private variable cannot see the private variable unless the subroutine
is also textually declared within the scope of the variable.

NEXT                                                               *perl_next*
------------------------------------------------------------------------------
next label

Immediately jumps to the next iteration of the loop identified by label or the
innermost enclosing loop, if there is no argument. If there is a continue
block, it will be executed immediately after the next, before the loop is
reiterated.

NO                                                                   *perl_no*
------------------------------------------------------------------------------
no Module list

Effectively "undoes" the use function. Used to deactivate pragmas (compiler
directives) for sections of your program. For instance: >

    no strict 'refs'
<
allows soft references to the end of the block scope, if: >

    use strict 'refs'
<
was previously invoked.

OCT                                                                 *perl_oct*
------------------------------------------------------------------------------
oct ostring

Interprets ostring as an octal string and returns the equivalent decimal
value. (If ostring happens to start off with 0x, it is interpreted as a hex
string instead.) The following will handle decimal, octal, and hex in the
standard notation: >

    $val = oct $val if $val =~ /^0/;
<
If ostring is omitted, the function interprets $_. To perform the inverse
function on octal numbers, use: >

    $oct_string = sprintf "%lo", $number;
<
OPEN                                                               *perl_open*
------------------------------------------------------------------------------
open filehandle, filename

Opens the file given by filename, and associates it with filehandle. If
filehandle is omitted, the scalar variable of the same name as the filehandle
must contain the filename. (And you must also be careful to use "or die" after
the statement rather than "|| die", because the precedence of || is higher
than list operators like open.)

If filename is preceded by either < or nothing, the file is opened for input
(read-only). If filename is preceded by >, the file is opened for output. If
the file doesn't exist, it will be created; if the file exists, it will be
overwritten with output using >. Preceding the filename with >> opens an
output file for appending. For both read and write access, use a + before
either < or >.

A filehandle may also be attached to a process by using a piped command. If
the filename begins with |, the filename is interpreted as a command to which
output is to be piped. If the filename ends with a |, the filename is
interpreted as a command which pipes input to you. You may not have an open
command that pipes both in and out.

Any pipe command containing shell metacharacters is passed to the shell for
execution; otherwise, it is executed directly by Perl. The filename "-" refers
to STDIN, and ">" refers to STDOUT. open returns non-zero upon success, the
undefined value otherwise. If the open involved a pipe, the return value
happens to be the process ID of the subprocess.

OPENDIR                                                         *perl_opendir*
------------------------------------------------------------------------------
opendir dirhandle, directory

Opens a directory for processing by readdir, telldir, seekdir, rewinddir, and
closedir. The function returns true if successful. Directory handles have
their own namespace separate from filehandles.

ORD                                                                 *perl_ord*
------------------------------------------------------------------------------
ord expr

Returns the numeric ASCII value of the first character of expr. If expr is
omitted, it uses $_. The return value is always unsigned. If you want a signed
value, use unpack('c', expr). If you want all the characters of the string
converted to a list of numbers, use unpack('C*', expr) instead.

PACK                                                               *perl_pack*
------------------------------------------------------------------------------
pack template, list

Takes a list of values and packs it into a binary structure, returning the
string containing the structure. The template is a sequence of characters that
give the order and type of values, as follows:

Character       Meaning
a               An ASCII string, will be null padded
A               An ASCII string, will be space padded
b               A bit string, low-to-high order (like vec())
B               A bit string, high-to-low order
c               A signed char value
C               An unsigned char value
d               A double-precision float in the native format
f               A single-precision float in the native format
h               A hexadecimal string, low nybble first
H               A hexadecimal string, high nybble first
i               A signed integer value
I               An unsigned integer value
l               A signed long value
L               An unsigned long value
n               A short in "network" (big-endian) order
N               A long in "network" (big-endian) order
p               A pointer to a string
P               A pointer to a structure (fixed-length string)
s               A signed short value
S               An unsigned short value
v               A short in "VAX" (little-endian) order
V               A long in "VAX" (little-endian) order
u               A uuencoded string
w               A BER compressed integer
x               A null byte
X               Back up a byte
@               Null-fill to absolute position

Each character may optionally be followed by a number that gives a repeat
count. Together the character and the repeat count make a field specifier.
Field specifiers may be separated by whitespace, which will be ignored. With
all types except a and A, the pack function will gobble up that many values
from the list. Saying * for the repeat count means to use however many items
are left. The a and A types gobble just one value, but pack it as a string of
length count, padding with nulls or spaces as necessary. (When unpacking, A
strips trailing spaces and nulls, but a does not.) Real numbers (floats and
doubles) are in the native machine format only; due to the multiplicity of
floating formats around, and the lack of a standard network representation, no
facility for interchange has been made.

The same template may generally also be used in the unpack function. If you
want to join variable length fields with a delimiter, use the join function.

PACKAGE                                                         *perl_package*
------------------------------------------------------------------------------
package namespace

Declares that the rest of the innermost enclosing block, subroutine, eval or
file belongs to the indicated namespace. (The scope of a package declaration
is thus the same as the scope of a local or my declaration.) All subsequent
references to unqualified global identifiers will be resolved by looking them
up in the declared packages symbol table. A package declaration affects only
global variables - including those you've used local on - but not lexical
variables created with my.

Typically you would put a package declaration as the first thing in a file
that is to be included by the require or use operator, but you can put one
anywhere that a statement would be legal. When defining a class or a module
file, it is customary to name the package the same name as the file, to avoid
confusion. (It's also customary to name such packages beginning with a capital
letter, because lowercase modules are, by convention, interpreted as pragmas.)

PIPE                                                               *perl_pipe*
------------------------------------------------------------------------------
pipe readhandle, writehandle

Opens a pair of connected pipes. This call is almost always used right before
a fork, after which the pipes reader should close writehandle, and the writer
should close readhandle. (Otherwise the pipe won't indicate EOF to the reader
when the writer closes it.) Note that if you set up a loop of piped processes,
deadlock can occur unless you are very careful. In addition, note that Perl's
pipes use standard I/O buffering, so you may need to set $| on your
writehandle to flush after each output command, depending on the application -
see select filehandle.

POP                                                                 *perl_pop*
------------------------------------------------------------------------------
pop @array

Treats an array like a stack, popping and returning the last value of the
array, shortening the array by one element. If array is omitted, the function
pops @ARGV (in the main program), or @_ (in subroutines).

If there are no elements in the array, pop returns the undefined value. See
also push and shift. If you want to pop more than one element, use splice.

POS                                                                 *perl_pos*
------------------------------------------------------------------------------
pos $scalar

Returns the location in scalar where the last m//g search over scalar left
off. It returns the offset of the character after the last one matched. This
is the offset where the next m//g search on that string will start. Remember
that the offset of the beginning of the string is 0. For example: >

    $grafitto = "fee fie foe foo";
    while ($grafitto =~ m/e/g) {
        print pos $grafitto, "\n";
    }
<
prints 2, 3, 7, and 11, the offsets of each of the characters following an e".
The pos function may be assigned a value to tell the next m//g where to start.

PRINT                                                             *perl_print*
------------------------------------------------------------------------------
print [filehandle] list

Prints a string or a comma-separated list of strings to the specified
filehandle. If no filehandle is given, the function prints to the currently
open filehandle (STDOUT initially). The function returns 1 if successful, 0
otherwise. filehandle may be a scalar variable name (unsubscripted), in which
case the variable contains either the name of the actual filehandle or a
reference to a filehandle object from one of the object-oriented filehandle
packages. filehandle may also be a block that returns either kind of value: >

    print { $OK ? "STDOUT" : "STDERR" } "stuff\n";
    print { $iohandle[$i] } "stuff\n";
<
If list is also omitted, $_ is printed. Note that, because print takes a list,
anything in the list is evaluated in list context.

PRINTF                                                           *perl_printf*
------------------------------------------------------------------------------
printf [filehandle] format, list

Prints a formatted string of the elements in list to filehandle or, if
omitted, the currently selected output filehandle. This is similar to the C
library's printf and fprintf functions, except that the * field width
specifier is not supported. The function is exactly equivalent to: >

    print filehandle sprintf(format, list);
<
printf and sprintf use the same format syntax, but sprintf only returns a
string; it doesn't print to a filehandle. The format string contains text with
embedded field specifiers into which the the elements of list are substituted
in order, one per field. Field specifiers follow the form: >

    %m.nx
<
A percent sign begins each field, and x is the type of field. The optional m
gives the minimum field width for appropriate field types (negative m
left-justifies). The .n gives the precision for a specific field type, such as
the number of digits after a decimal point for floating-point numbers, the
maximum length for a string, and the minimum length for an integer.

Field specifiers (x) may be the following:

Code    Meaning
%       Percent sign
c       Character
d       Decimal integer
e       Exponential format floating-point number
E       Exponential format floating-point number with uppercase E
f       Fixed-point format floating-point number
g       Floating-point number, in either exponential or fixed decimal notation
G       Like g with uppercase E (if applicable)
ld      Long decimal integer
lo      Long octal integer
lu      Long unsigned decimal integer
lx      Long hexadecimal integer
o       Octal integer
s       String
u       Unsigned decimal integer
x       Hexadecimal integer
X       Hexadecimal integer with uppercase letters
p       The Perl value's address in hexadecimal
n       Special value that stores the number of characters output so far into
        the next variable in the parameter list

PROTOTYPE                                                     *perl_prototype*
------------------------------------------------------------------------------
prototype function

Returns the prototype of a function as a string, or undef if the function has
no prototype. function is the name of the function or a reference to it.

PUSH                                                               *perl_push*
------------------------------------------------------------------------------
push @array, list

Pushes the elements of list onto the end of array. The length of array
increases by the length of list. The function returns this new length. See
also pop and unshift.

QSTRING                                                               *perl_q*
------------------------------------------------------------------------------
q/string/
qq/string/
qx/string/
qw/strings/

Generalized forms of quoting. q// is equivalent to using single quotes
(literal, no variable interpolation). qq// is equivalent to double quotes
(literal, interpolated). qx// is equivalent to using backticks for commands
(interpolated). And qw// is equivalent to splitting a single-quoted string on
whitespace.

QUOTEMETA                                                     *perl_quotemeta*
------------------------------------------------------------------------------
quotemeta expr

Returns the value of expr (or $_ if not specified) with all non-alphanumeric
characters backslashed. This is the internal function implementing the \Q
escape in interpolative contexts (including double-quoted strings, backticks,
and patterns).

RAND                                                               *perl_rand*
------------------------------------------------------------------------------
rand num

Returns a random fractional number between 0 and the value of num. (num should
be positive.) If num is omitted, the function returns a value between 0 and 1
(including 0, but excluding 1). See also srand.

To get an integral value, combine this with int, as in: >

    $roll = int(rand 6) + 1;       # $roll is now an integer between 1 and 6
<
READ                                                               *perl_read*
------------------------------------------------------------------------------
read filehandle, $var, length, [offset]

Attempts to read length bytes of data into variable var from the specified
filehandle. The function returns the number of bytes actually read, or 0 at
end-of-file. It returns the undefined value on error. var will grow or shrink
to the length actually read. The offset, if specified, says where in the
variable to start putting bytes, so that you can do a read into the middle of
a string.

To copy data from the filehandle FROM into the filehandle TO, you could say: >

    while (read FROM, $buf, 16384) {
        print TO $buf;
    }
<
Note that the opposite of read is simply print, which already knows the length
of the string you want to write and can write a string of any length.

Perl's read function is actually implemented in terms of standard I/O's fread
function, so the actual read system call may read more than length bytes to
fill the input buffer, and fread may do more than one system read in order to
fill the buffer. To gain greater control, specify the real system call using
sysread.

READDIR                                                         *perl_readdir*
------------------------------------------------------------------------------
readdir dirhandle

Reads directory entries from a directory handle opened by opendir. In scalar
context, this function returns the next directory entry, if any; otherwise, it
returns an undefined value. In list context, it returns all the rest of the
entries in the directory, which will of course be a null list if there are
none.

READLINE                                                       *perl_readline*
------------------------------------------------------------------------------
readline *filehandle

Reads a line or lines from the specified filehandle. (A typeglob of the
filehandle name should be supplied.) Returns one line per call in a scalar
context. Returns a list of all lines until the end-of-file in list context.

READLINK                                                       *perl_readlink*
------------------------------------------------------------------------------
readlink name

Returns the name of a file pointed to by the symbolic link name. name should
evaluate to a filename, the last component of which is a symbolic link. If it
is not a symbolic link, or if symbolic links are not implemented, or if some
system error occurs, the undefined value is returned, and you should check the
error code in $!. If name is omitted, the function uses $_.

READPIPE                                                       *perl_readpipe*
------------------------------------------------------------------------------
readpipe cmd

Executes cmd as a system command and returns the collected standard output of
the command. In a scalar context, the output is returned as a single, possibly
multiline string. In list context, a list of output lines is returned.

RECV                                                               *perl_recv*
------------------------------------------------------------------------------
recv socket, $var, len, flags

Receives a message on a socket. It attempts to receive len bytes of data into
variable var from the specified socket filehandle. The function returns the
address of the sender, or the undefined value if there's an error. var will
grow or shrink to the length actually read. The function takes the same flags
as the recv(2) system call.

REDO                                                               *perl_redo*
------------------------------------------------------------------------------
redo [label]

Restarts a loop block identified by label without re-evaluating the
conditional. The continue block, if any, is not executed. If the label is
omitted, the command refers to the innermost enclosing loop.

REF                                                                 *perl_ref*
------------------------------------------------------------------------------
ref $var

Returns a string indicating the type of the object referenced if var is a
reference; returns the null string otherwise. Built-in types include:

REF
SCALAR
ARRAY
HASH
CODE
GLOB

If the referenced object has been blessed into a package, that package name is
returned instead. You can think of ref as a "typeof" operator.

RENAME                                                           *perl_rename*
------------------------------------------------------------------------------
rename oldname, newname

Changes the name of a file from oldname to newname. It returns 1 for success,
0 otherwise (and puts the error code into $!). It will not work across
filesystem boundaries. If there is already a file named newname, it will be
destroyed.

REQUIRE                                                         *perl_require*
------------------------------------------------------------------------------
require filename
require num
require package

Asserts a dependency of some kind depending on its argument. (If an argument
is not supplied, $_ is used.)

If the argument is a string filename, this function includes and executes the
Perl code found in the separate file of that name. This is similar to
performing an eval on the contents of the file, except that require checks to
see that the library file has not been included already. The function also
knows how to search the include path stored in the @INC array.

If requires argument is a number num, the version number of the currently
executing Perl binary (as known by $]) is compared to num, and if smaller,
execution is immediately aborted. Thus, a script that requires Perl version
5.003 can have as its first line:

require 5.003; and earlier versions of Perl will abort.

If requires argument is a package name, require assumes an automatic .pm
suffix, making it easy to load standard modules. This is like use, except that
it happens at runtime, not compile time, and the import routine is not called.

RESET                                                             *perl_reset*
------------------------------------------------------------------------------
reset expr

Used at the top of a loop or in a continue block at the end of a loop, to
clear global variables or reset ?? searches so that they work again. expr is a
list of single characters (hyphens are allowed for ranges). All scalar
variables, arrays, and hashes beginning with one of those letters are reset to
their pristine state. If expr is omitted, one-match searches (?PATTERN?) are
reset to match again. The function resets variables or searches for the
current package only. It always returns 1.

Lexical variables (created by my) are not affected. Use of reset is vaguely
deprecated.

RETURN                                                           *perl_return*
------------------------------------------------------------------------------
return expr

Returns from a subroutine (or eval) with the value of expr. (In the absence of
an explicit return, the value of the last expression evaluated is returned.)
Use of return outside of a subroutine or eval will result in a fatal error.

The supplied expression will be evaluated in the context of the subroutine
invocation. That is, if the subroutine was called in a scalar context, expr is
also evaluated in scalar context. If the subroutine was invoked in a list
context, then expr is also evaluated in list context, and can return a list
value. A return with no argument returns the undefined value in scalar
context, and a null list in list context. The context of the subroutine call
can be determined from within the subroutine by using the (misnamed) wantarray
function.

REVERSE                                                         *perl_reverse*
------------------------------------------------------------------------------
reverse list

Returns a list value consisting of the elements of list in the opposite order.
This is fairly efficient because it just swaps the pointers around. In scalar
context, the function concatenates all the elements of list together and
returns the reverse of that, character by character.

REWINDDIR                                                     *perl_rewinddir*
------------------------------------------------------------------------------
rewinddir dirhandle

Sets the current position to the beginning of the directory for the readdir
routine on dirhandle. The function may not be available on all machines that
support readdir.

RINDEX                                                           *perl_rindex*
------------------------------------------------------------------------------
rindex str, substr, [position]

Works just like index except that it returns the position of the last
occurrence of substr in str (a reverse index). The function returns -1 if not
found. position, if specified, is the rightmost position that may be returned
- how far in the string the function can search.

RMDIR                                                             *perl_rmdir*
------------------------------------------------------------------------------
rmdir name

Deletes the directory specified by name if it is empty. If it succeeds, it
returns 1; otherwise, it returns 0 and puts the error code into $!. If name is
omitted, the function uses $_.

S                                                                     *perl_s*
------------------------------------------------------------------------------
s

substitution operator:
s/old-regex/new-string/.

If you want the replacement to operate on all possible matches instead of just
the first match, append a g to the substitution, as in: >

    $_ = "foot fool buffoon";
    s/foo/bar/g; # $_ is now "bart barl bufbarn"
<
The replacement string is variable interpolated, allowing you to specify the
replacement string at runtime: >

    $_ = "hello, world"
    $new = "goodbye";
    s/hello/$new/; # replaces hello with goodbye
<
Pattern characters in the regular expression allow patterns to be matched,
rather than just fixed characters: >

    $_ = "this is a test";
    s/(\w+)/<$1>/g; # $_ is now "<this> <is> <a> <test>"
<
Recall that $1 is set to the data within the first parenthesized pattern
match.

An i suffix (either before or after the g, if present) causes the regular
expression in the substitute operator to ignore case, just like the same
option on the match operator described earlier.

As with the match operator, an alternate delimiter can be selected if the
slash is inconvenient. Just use the same character three times:[7]

[7] Or, use two matching pairs if a left-right pair character is used.
>
    s#fred#barney#; # replace fred with barney, like s/fred/barney/
<
Also as with the match operator, you can specify an alternate target with the
=~ operator. In this case, the selected target must be something you can
assign a scalar value to, such as a scalar variable or an element of an array.
Here's an example: >

    $which = "this is a test";
    $which =~ s/test/quiz/; # $which is now "this is a quiz"
    $someplace[$here] =~ s/left/right/; # change an array element
    $d{"t"} =~ s/^/x /; # prepend "x " to hash element
<
SCALAR                                                           *perl_scalar*
------------------------------------------------------------------------------
scalar expr

Forces an expression expr to be evaluated in scalar context.

SEEK                                                               *perl_seek*
------------------------------------------------------------------------------
seek filehandle, offset, whence

Positions the file pointer for filehandle, just like the fseek(3) call of
standard I/O. The first position in a file is at offset 0, not offset 1, and
offsets refer to byte positions, not line numbers. The function returns 1 upon
success, 0 otherwise. For handiness, the function can calculate offsets from
various file positions for you. The value of whence specifies which of three
file positions your offset is relative to: 0, the beginning of the file; 1,
the current position in the file; or 2, the end of the file. offset may be
negative for a whence of 1 or 2.

SEEKDIR                                                         *perl_seekdir*
------------------------------------------------------------------------------
seekdir dirhandle, pos

Sets the current position for the readdir routine on dirhandle. pos must be a
value returned by telldir. This function has the same caveats about possible
directory compaction as the corresponding system library routine.

SELECT                                                           *perl_select*
------------------------------------------------------------------------------
select filehandle

Returns the currently selected output filehandle, and if filehandle is
supplied, sets that as the current default filehandle for output. This has two
effects: first, a write or a print without a filehandle argument will default
to this filehandle. Second, special variables related to output will refer to
this output filehandle.

SELECT                                                          *perl_select2*
------------------------------------------------------------------------------
select rbits, wbits, ebits, timeout

The four-argument select operator is totally unrelated to the previously
described select operator. This operator is for discovering which (if any) of
your file descriptors are ready to do input or output, or to report an
exceptional condition. It calls the select(2) system call with the bitmasks
you've specified, which you can construct using fileno and vec, like this: >

    $rbits = $wbits = $ebits = "";
    vec($rbits, fileno(STDIN), 1) = 1;
    vec($wbits, fileno(STDOUT), 1) = 1;
    $ein = $rin | $win;
<
The select call blocks until one or more file descriptors is ready for
reading, writing, or reporting an error condition. timeout is given in seconds
and tells select how long to wait.

SEMCTL                                                           *perl_semctl*
------------------------------------------------------------------------------
semctl id, semnum, cmd, arg

Calls the System V IPC system call semctl(2). If cmd is &IPC_STAT or &GETALL,
then arg must be a variable which will hold the returned semid_ds structure or
semaphore value array. The function returns like ioctl: the undefined value
for error, 0 but true for zero, or the actual return value otherwise. On
error, it puts the error code into $!. Before calling, you should say: >

    require "ipc.ph";
    require "sem.ph";
<
This function is available only on machines supporting System V IPC.

SEMGET                                                           *perl_semget*
------------------------------------------------------------------------------
semget key, nsems, size, flags

Calls the System V IPC system call semget(2). The function returns the
semaphore ID, or the undefined value if there is an error. On error, it puts
the error code into $!. Before calling, you should say: >

    require "ipc.ph";
    require "sem.ph";
<
This function is available only on machines supporting System V IPC.

SEMOP                                                             *perl_semop*
------------------------------------------------------------------------------
semop key, opstring

Calls the System V IPC system call semop(2) to perform semaphore operations
such as signaling and waiting. opstring must be a packed array of semop
structures. You can make each semop structure by saying pack('s*', $semnum,
$semop, $semflag). The number of semaphore operations is implied by the length
of opstring. The function returns true if successful, or false if there is an
error. On error, it puts the error code into $!. Before calling, you should
say: >

    require "ipc.ph";
    require "sem.ph";
<
This function is available only on machines supporting System V IPC.

SEND                                                               *perl_send*
------------------------------------------------------------------------------
send socket, msg, flags, [dest]

Sends a message msg on a socket. It takes the same flags as the system call of
the same name - see send(2). On unconnected sockets you must specify a
destination dest to send to, in which case send works like sendto(2). The
function returns the number of bytes sent, or the undefined value if there is
an error. On error, it puts the error code into $!.

(Some non-Unix systems improperly treat sockets as different objects than
ordinary file descriptors, with the result that you must always use send and
recv on sockets rather than the standard I/O operators.)

SETHOSTENT                                                   *perl_sethostent*
------------------------------------------------------------------------------
sethostent stayopen

Opens the hosts file (usually /etc/hosts on Unix systems) and resets the
"current" selection to the top of the file. stayopen, if non-zero, keeps the
file open across calls to other functions. Not implemented on Win32 systems.

SETGRENT                                                       *perl_setgrent*
------------------------------------------------------------------------------
setgrent

Opens the groups file (usually /etc/group on Unix systems) and resets the top
of the file as the starting point for any read and/or write functions on the
file (with the proper permissions). This function will reset the getgrent
function back to retrieve group entries from the start of the group file. Not
implemented on Win32 systems.

SETNETENT                                                     *perl_setnetent*
------------------------------------------------------------------------------
setnetent stayopen

Opens the networks file (usually /etc/group) and resets the "current"
selection to the top of the file. stayopen, if non-zero, keeps the file open
across calls to other functions. Not implemented on Win32 systems.

SETPGRP                                                         *perl_setpgrp*
------------------------------------------------------------------------------
setpgrp pid, pgrp

Sets the current process group pgrp for the specified pid (use a pid of 0 for
the current process). Invoking setpgrp will produce a fatal error if used on a
machine that doesn't implement setpgrp(2). Some systems will ignore the
arguments you provide and always do setpgrp(0, $$). Fortunately, those are the
arguments you usually provide. (For better portability, use the setpgid()
function in the POSIX module, or if you're really just trying to daemonize
your script, consider the POSIX::setsid() function as well.)

SETPRIORITY                                                 *perl_setpriority*
------------------------------------------------------------------------------
setpriority which, who, priority

Sets the current priority for a process, a process group, or a user. which
must indicate one of these types: PRIO_PROCESS, PRIO_PGRP, or PRIO_USER. who
therefore identifies the specific process, process group, or user with its ID.
priority is an integer number that will be added to or subtracted from the
current priority; the lower the number, the higher the priority. The
interpretation of a given priority may vary from one operating system to the
next. See setpriority on your system. Invoking setpriority will produce a
fatal error if used on a machine that doesn't implement setpriority.

SETPROTOENT                                                 *perl_setprotoent*
------------------------------------------------------------------------------
setprotoent stayopen

Opens the prototypes file (usually /etc/prototypes) and resets the "current"
selection to the top of the file. stayopen, if non-zero, keeps the file open
across calls to other functions. Not implemented on Win32 systems.

SETPWENT                                                       *perl_setpwent*
------------------------------------------------------------------------------
setpwent

Opens the password file (usually /etc/passwd) and resets the top of the file
as the starting point for any read and/or write functions on the file (with
the proper permissions). This function will reset the getpwent function back
to retrieve group entries from the start of the group file. Not implemented on
Win32 systems.

SETSERVENT                                                   *perl_setservent*
------------------------------------------------------------------------------
setservent stayopen

Opens the services file (usually /etc/services) and resets the "current"
selection to the top of the file. stayopen, if non-zero, keeps the file open
across calls to other functions. Not implemented on Win32 systems.

SETSOCKOPT                                                   *perl_setsockopt*
------------------------------------------------------------------------------
setsockopt socket, level, optname, optval

Sets the socket option requested (optname) to the value optval. The function
returns undefined if there is an error. optval may be specified as undef if
you don't want to pass an argument. level specifies the protocol type used on
the socket.

SHIFT                                                             *perl_shift*
------------------------------------------------------------------------------
shift @array

Removes the first value of @array and returns it, shortening the array by 1
and moving everything down. If there are no elements in the array, the
function returns the undefined value. If @array is omitted, the function
shifts @ARGV (in the main program), or @_ (in subroutines). See also unshift,
push, pop, and splice. The shift and unshift functions do the same thing to
the left end of an array that pop and push do to the right end.

SHMCTL                                                           *perl_shmctl*
------------------------------------------------------------------------------
shmctl id, cmd, arg

Calls the System V IPC system call, shmctl(2), for performing operations on
shared memory segments. If cmd is &IPC_STAT, then arg must be a variable that
will hold the returned shmid_ds structure. The function returns like ioctl:
the undefined value for error, "0 but true" for zero, or the actual return
value otherwise. On error, it puts the error code into $!. Before calling, you
should say: >

    require "ipc.ph";
    require "shm.ph";
<
This function is available only on machines supporting System V IPC.

SHMGET                                                           *perl_shmget*
------------------------------------------------------------------------------
shmget key, size, flags

Calls the System V IPC system call, shmget(2). The function returns the shared
memory segment ID, or the undefined value if there is an error. On error, it
puts the error code into $!. Before calling, you should say: >

    require "ipc.ph";
    require "shm.ph";
<
This function is available only on machines supporting System V IPC.

SHMREAD                                                         *perl_shmread*
------------------------------------------------------------------------------
shmread id, var, pos, size

Reads from the shared memory segment id starting at position pos for size size
(by attaching to it, copying out, and detaching from it). var must be a
variable that will hold the data read. The function returns true if
successful, or false if there is an error. On error, it puts the error code
into $!. This function is available only on machines supporting System V IPC.

SHMWRITE                                                       *perl_shmwrite*
------------------------------------------------------------------------------
shmwrite id, string, pos, size

Writes to the shared memory segment ID starting at position pos for size size
(by attaching to it, copying in, and detaching from it). If string is too
long, only size bytes are used; if string is too short, nulls are written to
fill out size bytes. The function returns true if successful, or false if
there is an error. On error, it puts the error code into $!. This function is
available only on machines supporting System V IPC.

SHUTDOWN                                                       *perl_shutdown*
------------------------------------------------------------------------------
shutdown socket, how

Shuts down a socket connection in the manner indicated by how. If how is 0,
further receives are disallowed. If how is 1, further sends are disallowed. If
how is 2, everything is disallowed.

(This function will not shut down your system; you'll have to execute an
external program to do that. See system.)

SIN                                                                 *perl_sin*
------------------------------------------------------------------------------
sin num

Returns the sine of num (expressed in radians). If num is omitted, it returns
the sine of $_.

SLEEP                                                             *perl_sleep*
------------------------------------------------------------------------------
sleep n

Causes the script to sleep for n seconds, or forever if no argument is given.
It may be interrupted by sending the process a SIGALRM. The function returns
the number of seconds actually slept. On some systems, the function sleeps
till the "top of the second," so, for instance, a sleep 1 may sleep anywhere
from 0 to 1 second, depending on when in the current second you started
sleeping.

SOCKET                                                           *perl_socket*
------------------------------------------------------------------------------
socket socket, domain, type, protocol

Opens a socket of the specified kind and attaches it to filehandle socket.
domain, type, and protocol are specified the same as for socket(2). Before
using this function, your program should contain the line:

USE Socket; *perl_use Socket;*
------------------------------------------------------------------------------
This setting gives you the proper constants. The function returns true if successful.

SOCKETPAIR                                                   *perl_socketpair*
------------------------------------------------------------------------------
socketpair sock1, sock2, domain, type, prtcl

Creates an unnamed pair of sockets in the specified domain and of the
specified type. domain, type, and protocol are specified the same as for
socketpair(2). If socketpair is unimplemented, invoking this function yields a
fatal error. The function returns true if successful.

This function is typically used just before a fork. One of the resulting
processes should close sock1, and the other should close sock2. You can use
these sockets bidirectionally, unlike the filehandles created by the pipe
function.

SORT                                                               *perl_sort*
------------------------------------------------------------------------------
sort [code] list

Sorts a list and returns the sorted list value. By default (without a code
argument), it sorts in standard string comparison order (undefined values
sorting before defined null strings, which sort before everything else). code,
if given, may be the name of a subroutine or a code block (anonymous
subroutine) that defines its own comparison mechanism for sorting elements of
list. The routine must return to the sort function an integer less than, equal
to, or greater than 0, depending on how the elements of the list are to be
ordered. (The handy <=> and cmp operators can be used to perform three-way
numeric and string comparisons.)

The normal calling code for subroutines is bypassed, with the following
effects: the subroutine may not be a recursive subroutine, and the two
elements to be compared are passed into the subroutine as $a and $b, not via
@_. The variables $a and $b are passed by reference, so don't modify them in
the subroutine.

Do not declare $a and $b as lexical variables (with my). They are package
globals (though theyre exempt from the usual restrictions on globals when
you're using use strict). You do need to make sure your sort routine is in the
same package though, or else you must qualify $a and $b with the package name
of the caller.

In versions preceding 5.005, Perl's sort is implemented in terms of C's
qsort(3) function. Some qsort(3) versions will dump core if your sort
subroutine provides inconsistent ordering of values. As of 5.005, however,
this is no longer true.

SPLICE                                                           *perl_splice*
------------------------------------------------------------------------------
splice @array, pos, [n], [list]

Removes n number of elements from @array starting at position pos, replacing
them with the elements of list, if provided. The function returns the elements
removed from the array. The array grows or shrinks as necessary. If n is
omitted, the function removes everything from pos onward.

SPLIT                                                             *perl_split*
------------------------------------------------------------------------------
split /pattern/, string, [limit]

Scans a string for delimiters that match pattern, and splits the string into a
list of substrings, returning the resulting list value in list context, or the
count of substrings in scalar context. The delimiters are determined by
repeated pattern matching, using the regular expression given in pattern, so
the delimiters may be of any size, and need not be the same string on every
match. If the pattern doesn't match at all, split returns the original string
as a single substring. If it matches once, you get two substrings, and so on.

If limit is specified and is not negative, the function splits into no more
than that many fields. If limit is negative, it is treated as if an
arbitrarily large limit has been specified. If limit is omitted, trailing null
fields are stripped from the result (which potential users of pop would do
well to remember). If string is omitted, the function splits the $_ string. If
pattern is also omitted, the function splits on whitespace, /\s+/, after
skipping any leading whitespace.

If the pattern contains parentheses, then the substring matched by each pair
of parentheses is included in the resulting list, interspersed with the fields
that are ordinarily returned. Here's a simple case: >

    split /([-,])/, "1-10,20";
    that produces the list value:
    (1, '-', 10, ',', 20)
<
SPRINTF                                                         *perl_sprintf*
------------------------------------------------------------------------------
sprintf format, list

Returns a string formatted by the printf conventions. The format string
contains text with embedded field specifiers into which the elements of list
are substituted, one per field. Field specifiers are roughly of the form:

%m.nx

where the m and n are optional sizes whose interpretation depends on the type
of field, and x is one of the following:

Code    Meaning
%       Percent sign
c       Character
d       Decimal integer
e       Exponential format floating-point number
E       Exponential format floating-point number with uppercase E
f       Fixed-point format floating-point number
g       Floating-point number, in either exponential or fixed decimal notation
G       Like g with uppercase E (if applicable)
ld      Long decimal integer
lo      Long octal integer
lu      Long unsigned decimal integer
lx      Long hexadecimal integer
o       Octal integer
s       String
u       Unsigned decimal integer
x       Hexadecimal integer
X       Hexadecimal integer with uppercase letters
p       The Perl value's address in hexadecimal
n       Special value that stores the number of characters output so far into
        the next variable in the parameter list.

m is typically the minimum length of the field (negative for left-justified),
and n is precision for exponential formats and the maximum length for other
formats. Padding is typically done with spaces for strings and zeroes for
numbers. The * character as a length specifier is not supported.

SQRT                                                               *perl_sqrt*
------------------------------------------------------------------------------
sqrt num

Returns the square root of num, or $_ if omitted. For other roots such as cube
roots, you can use the ** operator to raise something to a fractional power.

SRAND                                                             *perl_srand*
------------------------------------------------------------------------------
srand expr

Sets the random number seed for the rand operator so that rand can produce a
different sequence each time you run your program. If expr is omitted, a
default seed is used that is a mix of difficult-to-predict, system-dependent
values. If you call rand and you haven't called srand yet, rand calls srand
with the default seed.

STAT                                                               *perl_stat*
------------------------------------------------------------------------------
stat file

Returns a 13-element list giving the statistics for a file, indicated by
either a filehandle or an expression that gives its name. It's typically used
as follows: >

    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
        $atime,$mtime,$ctime,$blksize,$blocks)
                = stat $filename;
<
Not all fields are supported on all filesystem types. Here are the meanings of
the fields:

Field   Meaning
dev     Device number of filesystem
ino     Inode number
mode    File mode (type and permissions)
nlink   Number of (hard) links to the file
uid     Numeric user ID of file's owner
gid     Numeric group ID of file's owner
rdev    The device identifier (special files only)
size    Total size of file, in bytes
atime   Last access time since the epoch
mtime   Last modification time since the epoch
ctime   Inode change time (not creation time!) since the epoch
blksize Preferred blocksize for file system I/O
blocks  Actual number of blocks allocated

$dev and $ino, taken together, uniquely identify a file. The $blksize and
$blocks are likely defined only on BSD-derived filesystems. The $blocks field
(if defined) is reported in 512-byte blocks. Note that $blocks*512 can differ
greatly from $size for files containing unallocated blocks, or "holes," which
aren't counted in $blocks.

If stat is passed the special filehandle consisting of an underline, no actual
stat is done, but the current contents of the stat structure from the last
stat or stat-based file test (the -x operators) is returned.

STUDY                                                             *perl_study*
------------------------------------------------------------------------------
study scalar

This function takes extra time to study scalar ($_ if unspecified) in
anticipation of doing many pattern matches on the string before it is next
modified. You may have only one study active at a time - if you study a
different scalar, the first is "unstudied."

SUB                                                                 *perl_sub*
------------------------------------------------------------------------------
sub name [proto] {block}
sub [proto] name

Declares and defines a subroutine. name is the name given to the subroutine;
block is the code to be executed when the subroutine is called. Without block,
this statement only declares a subroutine, which must be defined at some later
point in your program. proto is a sequence of symbols that places constraints
on the arguments that the subroutine will receive. See Section 4.7,
"Subroutines" in Chapter 4.

SUBSTR                                                           *perl_substr*
------------------------------------------------------------------------------
substr string, pos, [n, replacement]

Extracts and returns a substring n characters long, starting at character
position pos, from a given string. If pos is negative, the substring starts
that far from the end of the string instead. If n is omitted, everything to
the end of the string is returned. If n is negative, the length is calculated
to leave that many characters off the end of the string.

You can use substr() as an lvalue - replacing the delimited substring with a
new string - if string is given as an lvalue. You can also specify a
replacement string in the fourth parameter to replace the substring. The
original extracted substring is still returned.

SYMLINK                                                         *perl_symlink*
------------------------------------------------------------------------------
symlink oldfile, newfile

Creates a new filename symbolically linked to the old filename. The function
returns 1 for success, 0 otherwise. On systems that don't support symbolic
links, it produces a fatal error at runtime. Be careful if you supply a
relative symbolic link, since itll be interpreted relative to the location of
the symbolic link itself, not your current working directory. See also link
and readlink.

SYSCALL                                                         *perl_syscall*
------------------------------------------------------------------------------
syscall list

Calls the system call specified as the first element of the list, passing the
remaining elements as arguments to the system call. The function produces a
fatal error if syscall(2) is unimplemented. The arguments are interpreted as
follows: if a given argument is numeric, the argument is passed as a C
integer. If not, a pointer to the string value is passed.

SYSOPEN                                                         *perl_sysopen*
------------------------------------------------------------------------------
sysopen filehandle, filename, mode, [perms]

Opens the file given by filename and associates it with filehandle. This
function calls open(2) with the parameters filename, mode, and perms.

The possible values and flag bits of the mode parameter are system-dependent;
they are available via the Fcntl library module. However, for historical
reasons, some values are universal: zero means read-only, one means
write-only, and two means read/write.

If the file named by filename does not exist, and sysopen creates it
(typically because mode includes the O_CREAT flag), then the value of perms
specifies the permissions of the newly created file. If perms is omitted, the
default value is 0666, which allows read and write for all. This default is
reasonable: see umask.

The FileHandle module provides a more object-oriented approach to sysopen. See
also open.

SYSREAD                                                         *perl_sysread*
------------------------------------------------------------------------------
sysread filehandle, scalar, length, [offset]

Reads length bytes of data into variable scalar from the specified filehandle.
The function returns the number of bytes actually read, or 0 at EOF. It
returns the undefined value on error. scalar will grow or shrink to the length
actually read. The offset, if specified, says where in the string to start
putting the bytes, so that you can read into the middle of a string that's
being used as a buffer. You should be prepared to handle the problems (like
interrupted system calls) that standard I/O normally handles for you.

SYSSEEK                                                         *perl_sysseek*
------------------------------------------------------------------------------
sysseek filehandle, offset, whence

A variant of seek() that sets and gets the file's system read/write position
using the lseek(2) system call. It's the only reliable way to seek before a
sysread() or syswrite(). Returns the new position, or undef on failure.
Arguments are the same as for seek.

SYSTEM                                                           *perl_system*
------------------------------------------------------------------------------
system list

Executes any program on the system for you. It does exactly the same thing as
exec list except that it does a fork first, and then, after the exec, it waits
for the execed program to complete. That is, it runs the program for you, and
returns when it's done, unlike exec, which never returns (if it succeeds).
Note that argument processing varies depending on the number of arguments, as
described for exec. The return value is the exit status of the program as
returned by the wait(2) call. To get the actual exit value, divide by 256.
(The lower eight bits are set if the process died from a signal.) See exec.

SYSWRITE                                                       *perl_syswrite*
------------------------------------------------------------------------------
syswrite filehandle, scalar, length, [offset]

Writes length bytes of data from variable scalar to the specified filehandle.
The function returns the number of bytes actually written, or the undefined
value on error. You should be prepared to handle the problems that standard
I/O normally handles for you, such as partial writes. The offset, if
specified, says where in the string to start writing from, in case you're
using the string as a buffer, for instance, or you need to recover from a
partial write.

Do not mix calls to print (or write) and syswrite on the same filehandle
unless you really know what you're doing.

TELL                                                               *perl_tell*
------------------------------------------------------------------------------
tell filehandle

Returns the current file position (in bytes, 0-based) for filehandle. This
value is typically fed to the seek function at some future time to get back to
the current position. If filehandle is omitted, the function returns the
position of the file last read. File positions are only meaningful on regular
files. Devices, pipes, and sockets have no file position.

TELLDIR                                                         *perl_telldir*
------------------------------------------------------------------------------
telldir dirhandle

Returns the current position of the readdir routines on a directory handle
(dirhandle). This value may be given to seekdir to access a particular
location in a directory. The function has the same caveats about possible
directory compaction as the corresponding system library routine. This
function may not be implemented everywhere that readdir is. Even if it is, no
calculation may be done with the return value. It's just an opaque value,
meaningful only to seekdir.

TIE                                                                 *perl_tie*
------------------------------------------------------------------------------
tie variable, classname, list

Binds a variable to a package class, classname, that will provide the
implementation for the variable. Any additional arguments (list) are passed to
the "new" method of the class (meaning TIESCALAR, TIEARRAY, or TIEHASH).
Typically these are arguments such as might be passed to the dbm_open(3)
function of C, but this is package-dependent. The object returned by the "new"
method is also returned by the tie function, which can be useful if you want
to access other methods in classname. (The object can also be accessed through
the tied function.)

A class implementing a hash should provide the following methods:

TIEHASH $class, LIST
DESTROY $self
FETCH $self, $key
STORE $self, $key, $value
DELETE $self, $key
EXISTS $self, $key
FIRSTKEY $self
NEXTKEY $self, $lastkey

A class implementing an ordinary array should provide the following methods:
TIEARRAY $classname, LIST
DESTROY $self
FETCH $self, $subscript
STORE $self, $subscript, $value

A class implementing a scalar should provide the following methods:
TIESCALAR $classname, LIST
DESTROY $self
FETCH $self,
STORE $self, $value

Unlike dbmopen, the tie function will not use or require a module for you -
you need to do that explicitly yourself.

TIED                                                               *perl_tied*
------------------------------------------------------------------------------
tied variable

Returns a reference to the object underlying variable (the same value that was
originally returned by the tie call which bound the variable to a package). It
returns the undefined value if variable isn't tied to a package. So, for
example, you can use: >

    ref tied %hash
<
to find out which package your hash is currently tied to.

TIME                                                               *perl_time*
------------------------------------------------------------------------------
time

Returns the number of non-leap seconds since January 1, 1970, UTC. The
returned value is suitable for feeding to gmtime and localtime, and for
comparison with file modification and access times returned by stat, and for
feeding to utime.

TIMES                                                             *perl_times*
------------------------------------------------------------------------------
times

Returns a four-element list giving the user and system CPU times, in seconds
(possibly fractional), for this process and for the children of this process:
>
    ($user, $system, $cuser, $csystem) = times;
    For example, to time the execution speed of a section of Perl code:
    $start = (times)[0];
    ...
    $end = (times)[0];
    printf "that took %.2f CPU seconds\n", $end - $start;
<
TR                                                                   *perl_tr*
------------------------------------------------------------------------------
tr

The tr operator takes two arguments: an old string and a new string. These
arguments work like the two arguments to s///; in other words, there's some
delimiter that appears immediately after the tr keyword that separates and
terminates the two arguments (in this case, a slash, but nearly any character
will do).

The tr operator modifies the contents of the $_ variable (just like s///),
looking for characters of the old string within the $_ variable. All such
characters found are replaced with the corresponding characters in the new
string. Here are some examples: >

    $_ = "fred and barney";
    tr/fb/bf/;        # $_ is now "bred and farney"
    tr/abcde/ABCDE/;  # $_ is now "BrED AnD fArnEy"
    tr/a-z/A-Z/;      # $_ is now "BRED AND FARNEY"
<
If the new string is shorter than the old string, the last character of the
new string is repeated enough times to make the strings equal length, like so:
>
    $_ = "fred and barney";
    tr/a-z/x/; # $_ is now "xxxx xxx xxxxxx"
<
To prevent this behavior, append a d to the end of the tr/// operator, which
means delete. In this case, the last character is not replicated. Any
character that matches in the old string without a corresponding character in
the new string is simply removed from the string. For example: >

    $_ = "fred and barney";
    tr/a-z/ABCDE/d; # $_ is now "ED AD BAE"
<
If the new list is empty and there's no d option, the new list is the same as
the old list. This default may seem silly. Why replace an I for an I and a 2
for a 2? But the command actually does something useful. The return value of
the tr/// operator is the number of characters matched by the old string, and
by changing characters into themselves, you can get the count of that kind of
character within the string.[3] For example:

[3] This method works only for single characters. To count strings, use the /g
flag to a pattern match: >

    while (/pattern/g) {
        $count++;
    }
    $_ = "fred and barney";
    $count = tr/a-z//;      # $_ unchanged, but $count is 13
    $count2 = tr/a-z/A-Z/;  # $_ is uppercased, and $count2 is 13
<
If you append a c (like appending the d), you complement the old string with
respect to all 256 characters. Any character you list in the old string is
removed from the set of all possible characters; the remaining characters,
taken in sequence from lowest to highest, form the resulting old string. So, a
way to count or change the nonletters in our string could be: >

    $_ = "fred and barney";
    $count = tr/a-z//c; # $_ unchanged, but $count is 2
    tr/a-z/_/c;         # $_ is now "fred_and_barney" (non-letters => _)
    tr/a-z//cd;         # $_ is now "fredandbarney" (delete non-letters)
<
Notice that the options can be combined, as shown in that last example, where
we first complement the set (the list of letters become the list of all
nonletters) and then use the d option to delete any character in that set.

The final option for tr/// is s, which squeezes multiple consecutive copies of
the same resulting translated letter into one copy. As an example, look at
this: >

    $_ = "aaabbbcccdefghi";
    tr/defghi/abcddd/s; # $_ is now "aaabbbcccabcd"
<
Note that the def became abc, and ghi (which would have become ddd without the
s option) becomes a single d. Also note that the consecutive letters at the
first part of the string are not squeezed because they didn't result from a
translation. Here are some more examples: >

    $_ = "fred and barney, wilma and betty";
    tr/a-z/X/s;   # $_ is now "X X X, X X X"
    $_ = "fred and barney, wilma and betty";
    tr/a-z/_/cs;  # $_ is now "fred_and_barney_wilma_and_betty"
<
In the first example, each word (consecutive letters) was squeezed down to a
single letter X. In the second example, all chunks of consecutive nonletters
became a single underscore.

Like s///, the tr operator can be targeted at another string besides $_ using
the =~ operator: >

    $names = "fred and barney";
    $names =~ tr/aeiou/X/; # $names now "frXd Xnd bXrnXy"
<
TRUNCATE                                                       *perl_truncate*
------------------------------------------------------------------------------
truncate file, length

Truncates a file (given as a filehandle or by name) to the specified length.
The function produces a fatal error if truncate(2) or an equivalent isn't
implemented on your system.

UC                                                                   *perl_uc*
------------------------------------------------------------------------------
uc string

Returns an uppercased version of string (or $_ if string is omitted). This is
the internal function implementing the \U escape in double-quoted strings.
POSIX setlocale(3) settings are respected.

UCFIRST                                                         *perl_ucfirst*
------------------------------------------------------------------------------
ucfirst string

Returns a version of string (or $_ if string is omitted) with the first
character uppercased. This is the internal function that implements the \u
escape in double-quoted strings. POSIX setlocale(3) settings are respected.

UMASK                                                             *perl_umask*
------------------------------------------------------------------------------
umask expr

Sets the umask for the process to expr and returns the old one. (The umask
tells Unix which permission bits to disallow when creating a file.) If expr is
omitted, the function merely returns the current umask. For example, to ensure
that the "other" bits are turned on and that the "user" bits are turned off,
try something like: >

    umask((umask() & 077) | 7);
<
UNDEF                                                             *perl_undef*
------------------------------------------------------------------------------
undef expr

Undefines the value of expr, which must be an lvalue. Use only on a scalar
value, an entire array or hash, or a subroutine name (using the & prefix). Any
storage associated with the object will be recovered for reuse (though not
returned to the system, for most versions of Unix). The undef function will
probably not do what you expect on most special variables. The function always
returns the undefined value. This is useful because you can omit the expr, in
which case nothing gets undefined, but you still get an undefined value that
you could, for instance, return from a subroutine to indicate an error.

You may use undef as a placeholder on the left side of a list assignment, in
which case the corresponding value from the right side is simply discarded.
Apart from that, you may not use undef as an lvalue.

UNLINK                                                           *perl_unlink*
------------------------------------------------------------------------------
unlink list

Deletes a list of files. (Under Unix, it will remove a link to a file, but the
file may still exist if another link references it.) If list is omitted, it
unlinks the file given in $_. The function returns the number of files
successfully deleted. Note that unlink will not delete directories unless you
are the superuser and the -U flag is supplied to Perl. Even if these
conditions are met, be warned that unlinking a directory can inflict serious
damage on your filesystem. Use rmdir instead.

UNPACK                                                           *perl_unpack*
------------------------------------------------------------------------------
unpack template, string

Takes a string (string) representing a data structure and expands it into a
list value, returning the list value. (unpack does the reverse of pack.) In a
scalar context, it can be used to unpack a single value. The template has much
the same format as in the pack function - it specifies the order and type of
the values to be unpacked. (See pack for a more detailed description of
template.)

UNSHIFT                                                         *perl_unshift*
------------------------------------------------------------------------------
unshift @array, list

Prepends the elements of list to the front of the array, and returns the new
number of elements in the array.

UNTIE                                                             *perl_untie*
------------------------------------------------------------------------------
untie variable

Breaks the binding between a variable and a package. See tie.

USE                                                                 *perl_use*
------------------------------------------------------------------------------
use Module list
use version
use Module version list

If the first argument is a number, it is treated as a version number. If the
version of Perl is less than version, an error message is printed and Perl
exits. This provides a way to check the Perl version at compilation time,
instead of waiting for runtime.

If version appears between Module and list, then use calls the version method
in class Module with version as an argument.

Otherwise, use imports some semantics into the current package from the named
Module, generally by aliasing certain subroutine or variable names into your
package. It is exactly equivalent to the following: >

    BEGIN { require Module; import Module list; }
<
The BEGIN forces the require and import to happen at compile time. The require
makes sure that the module is loaded into memory if it hasn't been yet. The
import is not a built-in function - it's just an ordinary static method call
into the package named by Module to tell the module to import the list of
features back into the current package. The module can implement its import
method any way it likes, though most modules just choose to derive their
import method via inheritance from the Exporter class that is defined in the
Exporter module.

If you don't want your namespace altered, explicitly supply an empty list: >

    use Module ();
<
That is exactly equivalent to the following: >

    BEGIN { require Module; }
<
Because this is a wide-open interface, pragmas (compiler directives) are also
implemented this way. See Chapter 8 for descriptions of the currently
implemented pragmas. These pseudomodules typically import semantics into the
current block scope, unlike ordinary modules, which import symbols into the
current package. (The latter are effective through the end of the file.)

There's a corresponding declaration, no, that "unimports" any meanings
originally imported by use, but that have since become less important: >

    no integer;
    no strict 'refs';
<
UTIME                                                             *perl_utime*
------------------------------------------------------------------------------
utime atime, mtime, files

Changes the access time (atime) and modification time (mtime) on each file in
a list of files. The first two elements must be the numerical access and
modification times, in that order. The function returns the number of files
successfully changed. The inode change time of each file is set to the current
time. Here's an example of a utime command: >

    #!/usr/bin/perl
    $now = time;
    utime $now, $now, @ARGV;
<
To read the times from existing files, use stat.

VALUES                                                           *perl_values*
------------------------------------------------------------------------------
values %hash

Returns a list consisting of all the values of the named hash. The values are
returned in an apparently random order, but it is the same order as either the
keys or each function would produce on the same hash. To sort the hash by its
values, see the example under keys. Note that using values on a hash that is
bound to a very large DBM file is going to produce a very large list, causing
you to have a very large process, and leaving you in a bind. You might prefer
to use the each function, which will iterate over the hash entries one by one
without reading them all into a single list.

VEC                                                                 *perl_vec*
------------------------------------------------------------------------------
vec string, offset, bits

Treats a string as a vector of unsigned integers, and returns the value of the
element specified by offset and bits. The function may also be assigned to,
which causes the element to be modified. The purpose of the function is to
provide very compact storage of lists of small integers. The integers may be
very small - vectors can hold numbers that are as small as one bit, resulting
in a bitstring.

The offset specifies how many elements to skip over to find the one you want.
bits is the number of bits per element in the vector, so each element can
contain an unsigned integer in the range 0..(2**bits)-1. bits must be one of
1, 2, 4, 8, 16, or 32. As many elements as possible are packed into each byte,
and the ordering is such that vec($vectorstring,0,1) is guaranteed to go into
the lowest bit of the first byte of the string. To find out the position of
the byte in which an element is going to be put, you have to multiply the
offset by the number of elements per byte. When bits is 1, there are eight
elements per byte. When bits is 2, there are four elements per byte. When bits
is 4, there are two elements (called nybbles) per byte. And so on.

Regardless of whether your system is big-endian or little-endian, vec($foo, 0,
8) always refers to the first byte of string $foo. See select for examples of
bitmaps generated with vec.

Vectors created with vec can also be manipulated with the logical operators |,
&, ^, and ~, which will assume a bit vector operation is desired when the
operands are strings. A bit vector (bits == 1) can be translated to or from a
string of 1s and 0s by supplying a b* template to unpack or pack. Similarly, a
vector of nybbles (bits == 4) can be translated with an h* template.

WAIT                                                               *perl_wait*
------------------------------------------------------------------------------
wait

Waits for a child process to terminate and returns the pid of the deceased
process, or -1 if there are no child processes. The status is returned in $?.
If you get zombie child processes, you should be calling either this function
or waitpid. A common strategy to avoid such zombies is: >

    $SIG{CHLD} = sub { wait };
<
If you expected a child and didn't find it, you probably had a call to system,
a close on a pipe, or backticks between the fork and the wait. These
constructs also do a wait(2) and may have harvested your child process. Use
waitpid to avoid this problem.

WAITPID                                                         *perl_waitpid*
------------------------------------------------------------------------------
waitpid pid, flags

Waits for a particular child process pid to terminate and returns the pid when
the process is dead, or -1 if there are no child processes or if the flags
specify non-blocking and the process isn't dead yet. The status of the dead
process is returned in $?. To get valid flag values say this: >

    use POSIX "sys_wait_h";
<
On systems that implement neither the waitpid(2) nor the wait4(2) system call,
flags may be specified only as 0. In other words, you can wait for a specific
pid, but you can't do it in non-blocking mode.

WANTARRAY                                                     *perl_wantarray*
------------------------------------------------------------------------------
wantarray

Returns true if the context of the currently executing subroutine is looking
for a list value. The function returns false if the context is looking for a
scalar. May also return undef if a subroutine's return value is not going to
be used at all.

WARN                                                               *perl_warn*
------------------------------------------------------------------------------
warn msg

Produces a message on STDERR just like die, but doesn't try to exit or throw
an exception. For example: >

    warn "Debug enabled" if $debug;
<
If the message supplied is null, the message "Something's wrong"is used. As
with die, a message not ending with a newline will have file and line number
information automatically appended. The warn operator is unrelated to the -w
switch.

WRITE                                                             *perl_write*
------------------------------------------------------------------------------
write filehandle

Writes a formatted record (possibly multiline) to the specified filehandle,
using the format associated with that filehandle - see Section 4.10 in Chapter
4. By default, the format for a filehandle is the one having the same name as
the filehandle.

If filehandle is unspecified, output goes to the current default output
filehandle, which starts out as STDOUT but may be changed by the select
operator. If the filehandle is an expression, then the expression is evaluated
to determine the actual filehandle at runtime.

Note that write is not the opposite of read. Use print for simple string
output. If you want to bypass standard I/O, see syswrite.

==============================================================================
vim: ft=help:norl:ts=8:tw=78
